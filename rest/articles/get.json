{
    "articles": [
        { 
            "id": "1",
            "title": "UX Mystery – Skill Matrix",
            "author": "Bogdan Nastasa",
            "published": "30-03-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/03/skill_matrix_main.png",
            "description": "Yes! It’s the period when you need to update your Skill Matrix. I know you are a busy person and you don’t have time to read/fill all~ 750 skills but we all need to allocate some time for this awesome",
            "content": "<p>Yes! It’s the period when you need to update your <a title=\"Skill Matrix\" href=\"https://hris.endava.com/skillMatrix/?reinit=true\">Skill Matrix</a>. I know you are a busy person and you don’t have time to read/fill all~ 750 skills but we all need to allocate some time for this <del>awesome</del> app.</p>\n<p>Today one of our colleague, Dragos, &nbsp;tried to <strong>do</strong> SkillMatrix but seems the app have a surprise for him. The “<strong>Other”</strong> field appear in<strong> Core skill</strong> category. What <a title=\"Other\" href=\"http://bit.ly/1xOiLuF\" target=\"_blank\">Other </a>means?</p>\n<p>Can you please help me to clarify this field? <img src=\"https://weblog.endava.com/user-experience-practice/wp-includes/images/smilies/icon_smile.gif\" alt=\":)\" class=\"wp-smiley\"> </p>\n<p>Anyway…you can be an EXPERT in OTHER!</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/other-skill-matrix.png\"><img class=\"alignleft size-full wp-image-468\" alt=\"other-skill-matrix\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/other-skill-matrix.png\" width=\"998\" height=\"331\"></a></p>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/03/other-skill-matrix.png"]
        },
        { 
            "id": "2",            
            "title": "jQuery Trickshots eBook",
            "author": "Bogdan Nastasa",
            "published": "19-03-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/03/jquery-trickshots-687x350.png",
            "description": "Meet jQuery Trickshots eBook.   Inside it, you will find a collection of 100 kickass tips and tricks for working with jQuery that I have discovered over the years as a JavaScript developer and author for Tutorialzine",
            "content": "<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/jquery-trickshots.png\"><img class=\"alignleft size-medium wp-image-454\" alt=\"jquery-trickshots\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/jquery-trickshots-280x300.png\" width=\"280\" height=\"300\"></a></p>\n<p>Meet <a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/jQuery-Trickshots.zip\" target=\"_blank\"><strong>jQuery Trickshots eBook.</strong></a></p>\n<p>&nbsp;</p>\n<p>Inside it, you will find a collection of 100 kickass tips and tricks for working with jQuery that I have discovered over the years as a JavaScript developer and author for <a href=\"http://tutorialzine.com/2013/04/check-out-jquery-trickshots-our-first-book/\" target=\"_blank\">Tutorialzine</a></p>\n<p>Some highlights from jQuery Trickshots<br>\n<strong>100 Advanced Techniques</strong><br>\nBased on hands-on knowledge from the author’s personal experience as a JavaScript programmer, you’ll get a large collection of incredibly useful tips and tricks.<br>\n<strong>Perfect for All Skill Levels</strong><br>\nThis book works for all skill levels, offering neat tricks, awesome plugins, and various tips on using and abusing the incredible jQuery library.<br>\n<strong>Easy to Follow</strong><br>\nLearn how to completely level the playing field and easily work around browser differences through the simple use of jQuery.</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/jQuery-Trickshots.zip\" target=\"_blank\"><strong>Download the ebook 2015 edition(pdf, epub, mobi + html/js samples)</strong></a></p>\n<p>&nbsp;</p>\n<p>Some samples from the book:</p>\n<p><strong>#36. Run multiple AJAX requests in parallel</strong><br>\nWhen working with APIs, you sometimes need to issue multiple AJAX requests to different endpoints. Instead of<br>\nwaiting for one request to complete before issuing the next, you can speed things up with jQuery by requesting<br>\nthe data in parallel, by using jQuery’s $.when() function:</p>\n<div><div id=\"highlighter_192067\" class=\"syntaxhighlighter  jscript\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"jscript plain\">$.when($.get(</code><code class=\"jscript string\">'1.json'</code><code class=\"jscript plain\">), $.get(</code><code class=\"jscript string\">'2.json'</code><code class=\"jscript plain\">)).then(</code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">(r1, r2){</code></div><div class=\"line number2 index1 alt1\"><code class=\"jscript plain\">console.log(r1[0].message + </code><code class=\"jscript string\">\" \"</code> <code class=\"jscript plain\">+ r2[0].message);</code></div><div class=\"line number3 index2 alt2\"><code class=\"jscript plain\">});</code></div></div></td></tr></tbody></table></div></div>\n<p>The callback function is executed when both of these GET requests finish successfully. $.when() takes the<br>\npromises returned by two $.get() calls, and constructs a new promise object. The r1 and r2 arguments of the<br>\ncallback are arrays, whose first elements contain the server responses.</p>\n<p>&nbsp;</p>\n<p><strong>#45. Scrape sites with YQL</strong><br>\nYQL is the ultimate API for the JavaScript developer. It makes it possible to work with all kinds of third party<br>\nAPIs through a SQL-like interface. Here is how to use it to fetch and parse HTML from remote sites:</p>\n<div><div id=\"highlighter_109482\" class=\"syntaxhighlighter  jscript\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"jscript comments\">// Define variables</code></div><div class=\"line number2 index1 alt1\"><code class=\"jscript keyword\">var</code> <code class=\"jscript plain\">query = </code><code class=\"jscript string\">'select * from data.html.cssselect where</code></div><div class=\"line number3 index2 alt2\"><code class=\"jscript string\">url=\"http://www.chucknorrisfacts.com/chuck-norris-top-50-facts\" and css=\".fieldcontent</code></div><div class=\"line number4 index3 alt1\"><code class=\"jscript string\">a\"'</code><code class=\"jscript plain\">;</code></div><div class=\"line number5 index4 alt2\"><code class=\"jscript keyword\">var</code> <code class=\"jscript plain\">yqlAPI = </code><code class=\"jscript string\">'http://query.yahooapis.com/v1/public/yql?q='</code> <code class=\"jscript plain\">+ encodeURIComponent(query)</code></div><div class=\"line number6 index5 alt1\"><code class=\"jscript plain\">+ </code><code class=\"jscript string\">' &amp;format=json&amp;env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys&amp;callback=?'</code><code class=\"jscript plain\">;</code></div><div class=\"line number7 index6 alt2\"><code class=\"jscript plain\">$.getJSON(yqlAPI, </code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">(r){</code></div><div class=\"line number8 index7 alt1\"><code class=\"jscript plain\">console.log(</code><code class=\"jscript string\">'Chuck Norris Facts:'</code><code class=\"jscript plain\">);</code></div><div class=\"line number9 index8 alt2\"><code class=\"jscript plain\">$.each(r.query.results.results.a, </code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">(){</code></div><div class=\"line number10 index9 alt1\"><code class=\"jscript plain\">console.log(</code><code class=\"jscript string\">'----------'</code><code class=\"jscript plain\">);</code></div><div class=\"line number11 index10 alt2\"><code class=\"jscript plain\">console.log(</code><code class=\"jscript keyword\">this</code><code class=\"jscript plain\">.content);</code></div><div class=\"line number12 index11 alt1\"><code class=\"jscript plain\">});</code></div><div class=\"line number13 index12 alt2\"><code class=\"jscript plain\">});</code></div></div></td></tr></tbody></table></div></div>\n<p>The results speak for themselves:<br>\nChuck Norris Facts:<br>\n———-<br>\nChuck Norris has the right to keep and arm bears.<br>\n———-<br>\nChuck Norris can turn the lights off by clapping his eyelids twice.<br>\n———-<br>\nWhen Alexander Bell invented the telephone he had 3 missed calls from Chuck Norris<br>\n———-<br>\nFear of spiders is aracnaphobia, fear of tight spaces is chlaustraphobia, fear of<br>\nChuck Norris is called Logic<br>\n———-<br>\nChuck Norris doesn’t call the wrong number. You answer the wrong phone.</p>\n<p>&nbsp;</p>\n<p><strong>#66. Bring media queries to jQuery</strong></p>\n<p>There is one additional feature of Modernizr that is worth mentioning – its ability to bring CSS3-like media<br>\nqueries to JavaScript / jQuery. This will let you write layouts that respond to the screen size and orientation of<br>\nthe device.<br>\nFirst, include the library:</p>\n<div><div id=\"highlighter_9913\" class=\"syntaxhighlighter  html\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"html plain\">&lt;</code><code class=\"html keyword\">script</code> <code class=\"html color1\">src</code><code class=\"html plain\">=</code><code class=\"html string\">\"modernizr.custom.js\"</code><code class=\"html plain\">&gt;&lt;/</code><code class=\"html keyword\">script</code><code class=\"html plain\">&gt;</code></div></div></td></tr></tbody></table></div></div>\n<p><em id=\"__mceDel\">You can now start parsing media queries:</em></p>\n<div><div id=\"highlighter_580385\" class=\"syntaxhighlighter  jscript\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"jscript keyword\">var</code><code class=\"jscript plain\">&lt;em id=</code><code class=\"jscript string\">\"__mceDel\"</code><code class=\"jscript plain\">&gt; w = $(window);</code></div><div class=\"line number2 index1 alt1\"><code class=\"jscript plain\">w.on(</code><code class=\"jscript string\">'resize'</code><code class=\"jscript plain\">,</code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">(){</code></div><div class=\"line number3 index2 alt2\"><code class=\"jscript keyword\">if</code><code class=\"jscript plain\">(Modernizr.mq(</code><code class=\"jscript string\">'(max-width: 640px) and (orientation:portrait)'</code><code class=\"jscript plain\">)){</code></div><div class=\"line number4 index3 alt1\"><code class=\"jscript plain\">console.log(</code><code class=\"jscript string\">'iPhone portrait layout'</code><code class=\"jscript plain\">);</code></div><div class=\"line number5 index4 alt2\"><code class=\"jscript plain\">}</code></div><div class=\"line number6 index5 alt1\"><code class=\"jscript keyword\">else</code> <code class=\"jscript keyword\">if</code><code class=\"jscript plain\">(Modernizr.mq(</code><code class=\"jscript string\">'(max-width: 960px)'</code><code class=\"jscript plain\">)){</code></div><div class=\"line number7 index6 alt2\"><code class=\"jscript plain\">console.log(</code><code class=\"jscript string\">'Narrow layout'</code><code class=\"jscript plain\">);</code></div><div class=\"line number8 index7 alt1\"><code class=\"jscript plain\">}</code></div><div class=\"line number9 index8 alt2\"><code class=\"jscript keyword\">else</code><code class=\"jscript plain\">{</code></div><div class=\"line number10 index9 alt1\"><code class=\"jscript plain\">console.log(</code><code class=\"jscript string\">'Regular layout'</code><code class=\"jscript plain\">);</code></div><div class=\"line number11 index10 alt2\"><code class=\"jscript plain\">}</code></div><div class=\"line number12 index11 alt1\"><code class=\"jscript plain\">});&lt;/em&gt;</code></div></div></td></tr></tbody></table></div></div>\n<p><em id=\"__mceDel\"><br>\nModernizr has other neat features that you can learn more about by visiting their <a href=\"http://modernizr.com/docs/\" target=\"_blank\">site</a>.</em></p>\n<p>&nbsp;</p>\n<p>If you find it interesting and you want to discover the rest of trickshots you can download the ebook from <a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/jQuery-Trickshots.zip\" target=\"_blank\">here&nbsp;</a></p>",
            "gallery": []
        },
        {
            "id": "3",
            "title": "Unit testing AngularJS applications with Jasmine and Karma",
            "author": "Istvan Trombitas",
            "published": "12-03-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/03/unit-testing-with-karma-jasmine-for-angularjs-2-500x350.png",
            "description": "Working with AngularJS at a certain point you inevitable run into the need for creating unit tests for the directives, services, filters and controllers you’ve created. ",
            "content": "<div><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/unit-testing-with-karma-jasmine-for-angularjs-2.png\"><img class=\"alignleft size-medium wp-image-431\" alt=\"unit-testing-with-karma-jasmine-for-angularjs-2\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/unit-testing-with-karma-jasmine-for-angularjs-2-300x240.png\" width=\"300\" height=\"240\"></a>Working with AngularJS at a certain point you inevitable run into the need for creating unit tests for the directives, services, filters and controllers you’ve created.<p></p>\n<p>This tutorial shows how to set up an AngularJS application and then how write and run unit tests for it.</p>\n<p>It will be a long article but it will mark the places where you can take a short break, so you can continue fresh. We gathered all the files in a <a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/Unit-testing-AngularJS-applications-with_Jasmine-and-Karma.zip\">zip</a>, but you better start the tutorial step by step to understand it fully.</p></div>\n<h2 style=\"clear:left\">Table of contents:</h2>\n<p>- <a href=\"#a-intro\">Introduction: basic installations</a><br>\n- <a href=\"#a-settingajs\">Setting up AngularJS</a><br>\n- <a href=\"#a-createapp\">Create the application</a><br>\n- <a href=\"#a-unittenv\">The unit testing environment</a><br>\n- <a href=\"#a-simpletest\">Writing a simple test</a><br>\n- <a href=\"#a-runningtest\">Running tests</a><br>\n- <a href=\"#a-testsforang\">Writing tests for our AngularJS application</a><br>\n- <a href=\"#a-testc\">Test the controller</a><br>\n- <a href=\"#a-testd\">Test the directive</a><br>\n- <a href=\"#a-tests\">Test the service</a><br>\n- <a href=\"#a-testf\">Test the filter</a></p>\n<p><strong id=\"a-intro\">&nbsp;</strong><br>\n<strong>The technologies we will use:</strong></p>\n<ul>\n<li><a href=\"https://www.npmjs.com/\" target=\"_blank\">NPM</a> (node package manager)</li>\n<li><a href=\"http://gruntjs.com/\" target=\"_blank\">Grunt</a> (Javascript taskrunner) – optional</li>\n<li><a href=\"http://bower.io/\" target=\"_blank\">Bower</a> (Dependency manager) – optional</li>\n<li><a href=\"https://angularjs.org/\" target=\"_blank\">AngularJS</a></li>\n<li><a href=\"http://jasmine.github.io/\" target=\"_blank\">Jasmine</a> (Javascript testing framework)</li>\n<li><a href=\"http://karma-runner.github.io/0.12/index.html\" target=\"_blank\">Karma</a> (Javascript test runner)</li>\n<li><a href=\"http://phantomjs.org/\" target=\"_blank\">PhantomJS</a> – Headless WebKit scriptable with a JavaScript API (run the tests without a real browser)</li>\n</ul>\n<p>Note: <em>Grunt </em>and <em>Bower </em>are optional, and if you don’t want to use them, you can skip the parts that are related to these tools. We use them because they are really cool and make the development become easier and faster.</p>\n<p><strong>We start with installing node.js (if you haven’t already) then Grunt and Bower:</strong></p>\n<ul>\n<li>Install node.js from <a href=\"http://nodejs.org/\" target=\"_blank\">here</a> for Mac or Windows, and for Linux check this <a href=\"https://github.com/nodesource/distributions\" target=\"_blank\">link</a>. After the install you can check its version by typing: <em>&gt; node -v</em><br>\nNode.js comes with <em>npm </em>installed, but npm gets updated more frequently than node.js, so sometimes you might want to run: <em>&gt; npm install npm -g</em> to get the latest version</li>\n<li>Create a basic <em>package.json</em> file for npm (more about the package.json file you can read <a href=\"https://docs.npmjs.com/files/package.json\" target=\"_blank\">here</a>):\n<div><div id=\"highlighter_634436\" class=\"syntaxhighlighter  jscript\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"jscript plain\">{</code></div><div class=\"line number2 index1 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript string\">\"name\"</code><code class=\"jscript plain\">: </code><code class=\"jscript string\">\"test-app-npm\"</code><code class=\"jscript plain\">,</code></div><div class=\"line number3 index2 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript string\">\"version\"</code><code class=\"jscript plain\">: </code><code class=\"jscript string\">\"0.0.1\"</code><code class=\"jscript plain\">,</code></div><div class=\"line number4 index3 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript string\">\"dependencies\"</code><code class=\"jscript plain\">: {},</code></div><div class=\"line number5 index4 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript string\">\"devDependencies\"</code><code class=\"jscript plain\">: {}</code></div><div class=\"line number6 index5 alt1\"><code class=\"jscript plain\">}</code></div></div></td></tr></tbody></table></div></div>\n</li>\n</ul>\n<ul>\n<li>To install Grunt insert the following line in package.json’s <em>devDependencies </em>object: <em>“grunt”: “~0.4.5″</em> and then run: <em>&gt; npm install</em>, or you can directly install Grunt with npm: <em>&gt; npm install grunt –save-dev</em>, this will install it locally and insert the above mentioned line into the package.json. More about installing Grunt globally you can find <a href=\"http://gruntjs.com/getting-started\" target=\"_blank\">here</a>.</li>\n<li>Install <em>load-grunt-tasks</em> Grunt plugin: <em>&gt; npm install load-grunt-tasks –save-dev</em></li>\n<li>Create a basic <em>Gruntfile.js</em> (capital G) to hold the tasks (for now the file will be empty, we will add a custom task later).\n<div><div id=\"highlighter_778708\" class=\"syntaxhighlighter  jscript\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"jscript plain\">module.exports = </code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">(grunt) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">/*load-grunt-tasks will automatically load any tasks you have listed in your</code></div><div class=\"line number3 index2 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">devDependencies in your project's package.json, provided that the task's</code></div><div class=\"line number4 index3 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">package name begins with the grunt- prefix.</code></div><div class=\"line number5 index4 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">*/</code></div><div class=\"line number6 index5 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">require(</code><code class=\"jscript string\">'load-grunt-tasks'</code><code class=\"jscript plain\">)(grunt);</code></div><div class=\"line number7 index6 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number8 index7 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">grunt.initConfig({</code></div><div class=\"line number9 index8 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">pkg: grunt.file.readJSON(</code><code class=\"jscript string\">'package.json'</code><code class=\"jscript plain\">)</code></div><div class=\"line number10 index9 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">});</code></div><div class=\"line number11 index10 alt2\"><code class=\"jscript plain\">};</code></div></div></td></tr></tbody></table></div></div>\n</li>\n</ul>\n<ul>\n<li>To install Bower locally run the following: <em>&gt; npm install bower –save-dev</em>, this will insert the following line into the package.json: <em>“bower”: “^1.3.12″</em>. More about installing Bower globally you can read <a href=\"http://bower.io/#install-bower\" target=\"_blank\">here</a>.</li>\n<li>Setting up Bower: first create a file named <em>.bowerrc</em> (starts with a dot) and edit it with the following<br>\n<em>{“directory”: “app/bower_components”}</em>, this will let bower know where to install the dependencies (ex: AngularJS or Bootstrap) for the project. You will have a directory <em>/app</em> where we’ll create the AngularJS application.<br>\nThen create the file <em>bower.json</em> with the following content:\n<div><div id=\"highlighter_167664\" class=\"syntaxhighlighter  jscript\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"jscript plain\">{</code></div><div class=\"line number2 index1 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript string\">\"name\"</code><code class=\"jscript plain\">: </code><code class=\"jscript string\">\"test-app-bower\"</code><code class=\"jscript plain\">,</code></div><div class=\"line number3 index2 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript string\">\"version\"</code><code class=\"jscript plain\">: </code><code class=\"jscript string\">\"0.0.1\"</code><code class=\"jscript plain\">,</code></div><div class=\"line number4 index3 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript string\">\"dependencies\"</code><code class=\"jscript plain\">: {},</code></div><div class=\"line number5 index4 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript string\">\"devDependencies\"</code><code class=\"jscript plain\">: {}</code></div><div class=\"line number6 index5 alt1\"><code class=\"jscript plain\">}</code></div></div></td></tr></tbody></table></div></div>\n</li>\n</ul>\n<p>More about bower.json you can find <a href=\"http://bower.io/docs/creating-packages/#bowerjson\" target=\"_blank\">here</a>.</p>\n<p>Now lets summarize what we have right now:</p>\n<ul>\n<li><em>node.js</em> and <em>npm</em> installed, and the <em>package.json</em> present in your working directory with 3 lines in the devDependencies: <em>grunt</em>, <em>load-grunt-tasks</em> and <em>bower</em></li>\n<li><em>Grunt </em>installed with <em>Grantfile.js</em> present in your working directory</li>\n<li><em>Bower </em>installed with <em>bower.json</em> and <em>.bowerrc</em> present in your working directory</li>\n</ul>\n<p>Don’t worry that these configuration files are quite empty right now, we will fill them with content soon. Now you can take a well deserved short break.</p>\n<p><strong id=\"a-settingajs\">&nbsp;</strong></p>\n<h2>Setting up AngularJS</h2>\n<p>Start with installing AngularJS and the necessary file and directory structure for the application (when you use <em>–save</em> the dependency will appear in bower.json’s <em>dependencies</em> object: we need these for production not just for the development (<em>–save-dev</em>)):</p>\n<ul>\n<li>Intall AngularJS: <em>&gt; bower install angular –save</em> (will insert the following line in the dependencies object: <em>“angular”: “~1.3.14″</em></li>\n<li>The directory <em>/app</em> has been created that has a<em> /bower_components</em> subfolder with all the dependencies (so far we have only <em>/angular</em> in it)</li>\n<li>Install Bootstrap: <em>&gt; bower install bootstrap –save</em> (nice css library)</li>\n<li>Install angular-sanitize: <em>&gt; bower install angular-sanitize –save</em> (for html interpolation)</li>\n</ul>\n<p><strong id=\"a-createapp\">&nbsp;</strong></p>\n<h2>Create the application</h2>\n<p>After all the necessary files and settings are in their right place, let’s create a nice little application called <em>Car catalog</em>, where you can add cars using a form and the application displays them in a nice format. Nothing big and fancy, but enough to see the use of the different AngularJS components (controller, services, directives, filters)</p>\n<ul>\n<li>Download the <em>index.html</em> and <em>scripts.js</em> from <a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/Unit-testing-AngularJS-applications-with_Jasmine-and-Karma-app.zip\">here</a> and copy them to the <em>/app</em> directory</li>\n<li>Open <em>scripts.js</em>: as you can see there is a module created (carModule), and then a controller (carCtrl), a service (carFormatMultilineText), a directive (displayCar) and a filter (carFormatName) are registered to it</li>\n<li>Run the application by opening the<em> index.html</em> in the browser</li>\n<li>You can play a bit with them and examine the source code to find out the usage of the above mentioned components. (Question: where is ngSanitize used?)</li>\n</ul>\n<p>We have created an AngularJS application where Bower is used for library dependencies. Wasn’t that difficult, was it? (You can take a break now)</p>\n<p><strong id=\"a-unittenv\">&nbsp;</strong></p>\n<h2>The unit testing environment</h2>\n<p>Now let’s install a few more things so that we can write and run tests:</p>\n<ul>\n<li>Install with Bower, and <em>–save-dev</em> the following library: <em>angular-mocks</em> (contains helper functions for Jasmine)</li>\n<li>Install with npm, and <em>–save-dev</em> the following packages:<br>\n- <em>karma</em><br>\n-<em> karma-jasmine</em> (Jasmine framework)<br>\n- <em>karma-phantomjs-launcher</em><br>\n- <em>karma-spec-reporter </em>(to have test reports in console, more reporters find <a href=\"https://www.npmjs.com/browse/keyword/karma-reporter\" target=\"_blank\">here</a>)</li>\n</ul>\n<p>When done with the installing, let’s see what we have in the package.json’s <em>devDependencies</em> object: <em>grunt</em>, <em>load-grunt-tasks</em>, <em>bower</em>, <em>karma</em>, <em>jasmine-core</em> (was added automatically), <em>karma-jasmine</em>, <em>karma-spec-reporter</em>, <em>karma-phantomjs-launcher</em>. The recommended approach is to have these installed locally.</p>\n<p>The bower.json’s <em>dependencies</em> object contains: <em>angular,</em> <em>bootstrap</em> and <em>angular-sanitize</em> – these are project specific dependencies.The <em>devDependencies</em> object contains: <em>angular-mocks</em> – required and it’s used for unit testing AngularJS.</p>\n<p><strong id=\"a-simpletest\">&nbsp;</strong></p>\n<h2>Writing a simple test</h2>\n<p>After all these settings we can now go ahead and write the first test. Create a directory in the application root: <em>test/unit</em> and a file in it: <em>test-spec.js</em>. It’s a good practice to have every spec file’s name end with -<em>spec.js</em>.</p>\n<p>Edit the <em>test-spec.js</em> file and add this:</p>\n<div><div id=\"highlighter_188487\" class=\"syntaxhighlighter  jscript\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"jscript plain\">describe(</code><code class=\"jscript string\">\"A suite\"</code><code class=\"jscript plain\">, </code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">() {</code></div><div class=\"line number2 index1 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">it(</code><code class=\"jscript string\">\"5+5 should be 10\"</code><code class=\"jscript plain\">, </code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">() {</code></div><div class=\"line number3 index2 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">expect(5+5).toBe(10);</code></div><div class=\"line number4 index3 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">});</code></div><div class=\"line number5 index4 alt2\"><code class=\"jscript plain\">});</code></div></div></td></tr></tbody></table></div></div>\n<p>This is a basic Jasmine test just to have an idea how one looks like. Later we will write a few more complicated ones for AngularJS. The <em>describe </em>is called a <em>suit</em> or <em>spec block, </em>they can have multiple <em>it</em>s (specs) or even other <em>describe</em>s as well (to form a certain hierarchy). <em>Describe </em>is basically a component of the application, a class or just a block of functions that you want to test. The <em>it</em> function is called <em>spec</em> and it “says” what a certain piece of program should do, in our case: “5+5 should be 10″. Every <em>it</em> needs to have at least one <em>expect </em>(matcher) that decides if the current spec (test) will fail or succeed. In our case if the 5+5 was not 10, the test would fail.</p>\n<p>You can play with it using the <a href=\"http://jasmine.github.io/2.0/introduction.html\" target=\"_blank\">Jasmine documentation</a> and an <a href=\"http://tryjasmine.com/\" target=\"_blank\">online test runner</a>.</p>\n<p><strong id=\"a-runningtest\">&nbsp;</strong></p>\n<h2>Running tests</h2>\n<p>You can have a short break now if you want, but if you can’t wait to see your test running keep reading on, we will setup <em>Karma </em>to run this Jasmine test.</p>\n<p>In the <em>/test</em> folder create a file <em>karma-unit.conf.js</em>, this will be the main configuration file for Karma (more on this you can read <a href=\"http://karma-runner.github.io/0.10/config/configuration-file.html\" target=\"_blank\">here</a>). We’re going to create a simple config file, just to run our little test.</p>\n<div><div id=\"highlighter_278555\" class=\"syntaxhighlighter  jscript\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"jscript plain\">module.exports = </code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">(config) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript keyword\">var</code> <code class=\"jscript plain\">conf = {</code></div><div class=\"line number3 index2 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">basePath: </code><code class=\"jscript string\">'..'</code><code class=\"jscript plain\">,</code></div><div class=\"line number4 index3 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">files: [</code></div><div class=\"line number5 index4 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//include all the files that you need for the test (source files, spec files)</code></div><div class=\"line number6 index5 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript string\">'test/**/*-spec.js'</code></div><div class=\"line number7 index6 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">],</code></div><div class=\"line number8 index7 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">exclude: [],</code></div><div class=\"line number9 index8 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">port: 8081,</code></div><div class=\"line number10 index9 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">autoWatch: </code><code class=\"jscript keyword\">false</code><code class=\"jscript plain\">,</code></div><div class=\"line number11 index10 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//we will use PhantomJS to run our tests (command line), but you can install other launchers (ex: Chrome) and have a html reporter to see the results in html</code></div><div class=\"line number12 index11 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">browsers: [</code><code class=\"jscript string\">'PhantomJS'</code><code class=\"jscript plain\">], </code></div><div class=\"line number13 index12 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">singleRun: </code><code class=\"jscript keyword\">true</code><code class=\"jscript plain\">,</code></div><div class=\"line number14 index13 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">frameworks: [</code><code class=\"jscript string\">'jasmine'</code><code class=\"jscript plain\">],</code></div><div class=\"line number15 index14 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//the results will be printed in the command line</code></div><div class=\"line number16 index15 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">reporters: [</code><code class=\"jscript string\">'spec'</code><code class=\"jscript plain\">] </code></div><div class=\"line number17 index16 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">}</code></div><div class=\"line number18 index17 alt1\">&nbsp;</div><div class=\"line number19 index18 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">config.set(conf);</code></div><div class=\"line number20 index19 alt1\"><code class=\"jscript plain\">};</code></div></div></td></tr></tbody></table></div></div>\n<p>After creating the config file, run the following command: <em>&gt; node ./node_modules/karma/bin/karma start test/karma-unit.conf.js</em> (paths to the locally installed Karma and to the config file), and the result in the command line will be the following:</p>\n<blockquote><p>Running “karma:unit” (karma) task</p>\n<p>INFO [karma]: Karma v0.12.31 server started at http://localhost:8081/<br>\nINFO [launcher]: Starting browser PhantomJS<br>\nINFO [PhantomJS 1.9.8 (Windows 8)]: Connected on socket eBbBiT94Tmn8UylsbjaU with id 82837833</p>\n<p>A suite<br>\n√ contains spec with an expectation</p>\n<p>PhantomJS 1.9.8 (Windows 8): Executed 1 of 1 SUCCESS</p>\n<p>Done, without errors.</p></blockquote>\n<p>So we have one test that was executed with success. More on how Karma works read <a href=\"http://karma-runner.github.io/0.12/intro/how-it-works.html\" target=\"_blank\">here</a>.</p>\n<p>You can keep running the tests with the above command, or you can configure <em>Grunt </em>to run them for you. To do that, we need to install the karma plugin for Grunt:</p>\n<ul>\n<li>Install <em>grunt-karma</em> with <em>npm</em> and <em>–save-dev</em></li>\n<li>Edit Gruntfile.js and insert the following configuration options for the karma plugin, then create the <em>test </em>and the <em>default </em>tasks:\n<div><div id=\"highlighter_293836\" class=\"syntaxhighlighter  jscript\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"jscript plain\">module.exports = </code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">(grunt) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">/*load-grunt-tasks will automatically load any tasks you have listed in your</code></div><div class=\"line number3 index2 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">devDependencies in your project's package.json, provided that the task's</code></div><div class=\"line number4 index3 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">package name begins with the grunt- prefix.</code></div><div class=\"line number5 index4 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">*/</code></div><div class=\"line number6 index5 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">require(</code><code class=\"jscript string\">'load-grunt-tasks'</code><code class=\"jscript plain\">)(grunt);</code></div><div class=\"line number7 index6 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number8 index7 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">grunt.initConfig({</code></div><div class=\"line number9 index8 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">pkg: grunt.file.readJSON(</code><code class=\"jscript string\">'package.json'</code><code class=\"jscript plain\">),</code></div><div class=\"line number10 index9 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">karma: {</code></div><div class=\"line number11 index10 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">unit: {</code></div><div class=\"line number12 index11 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">configFile: </code><code class=\"jscript string\">'./test/karma-unit.conf.js'</code><code class=\"jscript plain\">,</code></div><div class=\"line number13 index12 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">reporters: [</code><code class=\"jscript string\">'spec'</code><code class=\"jscript plain\">],</code></div><div class=\"line number14 index13 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">singleRun: </code><code class=\"jscript keyword\">true</code></div><div class=\"line number15 index14 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">}</code></div><div class=\"line number16 index15 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">}</code></div><div class=\"line number17 index16 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">});</code></div><div class=\"line number18 index17 alt1\">&nbsp;</div><div class=\"line number19 index18 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//Create a 'test' task that runs karma:unit task: &gt; grunt test</code></div><div class=\"line number20 index19 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">grunt.registerTask(</code><code class=\"jscript string\">'test'</code><code class=\"jscript plain\">, [ </code><code class=\"jscript string\">'karma:unit'</code><code class=\"jscript plain\">]);</code></div><div class=\"line number21 index20 alt2\">&nbsp;</div><div class=\"line number22 index21 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//The default task: &gt; grunt (optional)</code></div><div class=\"line number23 index22 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">grunt.registerTask(</code><code class=\"jscript string\">'default'</code><code class=\"jscript plain\">, [</code><code class=\"jscript string\">'test'</code><code class=\"jscript plain\">]);</code></div><div class=\"line number24 index23 alt1\"><code class=\"jscript plain\">};</code></div></div></td></tr></tbody></table></div></div>\n<p>Now you can execute the tests with: <em>&gt; grunt test</em> or (because we have included <em>test </em>in the <em>default</em> task) simply with: <em>&gt; grunt</em> – the output will be the same. Grunt is quite useful when you have a larger application that needs several operations to run on the code (ex: uglify, file concatenation, jshint), you can create different tasks and on one of them you can include the <em>test </em>task to, to run the existent tests.</p>\n<p>That was not easy, but you managed to run your first test, congratulations!</p>\n<p><strong id=\"a-testsforang\">&nbsp;</strong></p>\n<h2>Writing tests for our AngularJS application</h2>\n<p>Now comes the interesting part: after we know how to write tests using Jasmine and how to run them, we will see how we can test AngularJS: we will write 4 tests for our 4 components: controller, service, directive and filter. To run them use the: <em>&gt; grunt test</em> command.</p>\n<p>Ready? Here we go!</p>\n<p>We will test the components separately in their own spec files.</p>\n<p>Create under <em>/test/unit/</em> the following files:</p>\n<ul>\n<li>carCtrl-spec.js</li>\n<li>carFormatMultilineText-spec.js</li>\n<li>displayCar-spec.js</li>\n<li>carFormatName-spec.js</li>\n</ul>\n<p>You can give different names that include the component type or any other name you prefer. Having the aforementioned names makes clear what exactly the spec covers.</p>\n<p><strong id=\"a-testc\">&nbsp;</strong></p>\n<h3>Test the controller</h3>\n<p>Create the file <em>carCtrl-spec.js</em> and edit it:</p>\n<div><div id=\"highlighter_709695\" class=\"syntaxhighlighter  jscript\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"jscript string\">'use strict'</code><code class=\"jscript plain\">;</code></div><div class=\"line number2 index1 alt1\">&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"jscript plain\">describe(</code><code class=\"jscript string\">\"controller: carCtrl\"</code><code class=\"jscript plain\">, </code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">() {</code></div><div class=\"line number4 index3 alt1\">&nbsp;</div><div class=\"line number5 index4 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//Check the add() functionality of the controller</code></div><div class=\"line number6 index5 alt1\">&nbsp;</div><div class=\"line number7 index6 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript keyword\">var</code> <code class=\"jscript plain\">scope, ctrl;</code></div><div class=\"line number8 index7 alt1\">&nbsp;</div><div class=\"line number9 index8 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//Load the module that has the controller</code></div><div class=\"line number10 index9 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">beforeEach(</code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">() {</code></div><div class=\"line number11 index10 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">module(</code><code class=\"jscript string\">\"carApp\"</code><code class=\"jscript plain\">);</code></div><div class=\"line number12 index11 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">});</code></div><div class=\"line number13 index12 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//beforeEach(module(\"carApp\"));</code></div><div class=\"line number14 index13 alt1\">&nbsp;</div><div class=\"line number15 index14 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">beforeEach(</code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">() {</code></div><div class=\"line number16 index15 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//Get the $rootScope and $controller services</code></div><div class=\"line number17 index16 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">inject(</code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">($rootScope, $controller) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">scope = $rootScope.$</code><code class=\"jscript keyword\">new</code><code class=\"jscript plain\">();</code></div><div class=\"line number19 index18 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//Load the controller we want to test</code></div><div class=\"line number20 index19 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">ctrl = $controller(</code><code class=\"jscript string\">\"carCtrl\"</code><code class=\"jscript plain\">, {</code></div><div class=\"line number21 index20 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript string\">'$scope'</code><code class=\"jscript plain\">: scope</code></div><div class=\"line number22 index21 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">});</code></div><div class=\"line number23 index22 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">});</code></div><div class=\"line number24 index23 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">});</code></div><div class=\"line number25 index24 alt2\">&nbsp;</div><div class=\"line number26 index25 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">it(</code><code class=\"jscript string\">\"should add a new car into the catalogue\"</code><code class=\"jscript plain\">, </code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">() {</code></div><div class=\"line number27 index26 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript keyword\">var</code> <code class=\"jscript plain\">testCar = {</code></div><div class=\"line number28 index27 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">name: </code><code class=\"jscript string\">\"test car\"</code><code class=\"jscript plain\">,</code></div><div class=\"line number29 index28 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">year: </code><code class=\"jscript string\">\"2015\"</code><code class=\"jscript plain\">,</code></div><div class=\"line number30 index29 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">desc: </code><code class=\"jscript string\">\"test desc\"</code></div><div class=\"line number31 index30 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">};</code></div><div class=\"line number32 index31 alt1\">&nbsp;</div><div class=\"line number33 index32 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">scope.car = testCar;</code></div><div class=\"line number34 index33 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">scope.add();</code></div><div class=\"line number35 index34 alt2\">&nbsp;</div><div class=\"line number36 index35 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//The catalogue now should have one car</code></div><div class=\"line number37 index36 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">expect(scope.cars.length).toEqual(1);</code></div><div class=\"line number38 index37 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//That one car should be the testCar we created</code></div><div class=\"line number39 index38 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">expect(scope.cars[0]).toEqual(testCar);</code></div><div class=\"line number40 index39 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">});</code></div><div class=\"line number41 index40 alt2\"><code class=\"jscript plain\">});</code></div></div></td></tr></tbody></table></div></div>\n<p>As you can see here we use the <em>module()</em> and <em>inject()</em> functions from <a href=\"https://docs.angularjs.org/api/ngMock/function\" target=\"_blank\">angular-mocks</a> to load modules or services. Then we create a new <em>scope </em>to pass to the controller, define a test car and then we call the <em>add()</em> function to see if that is inserting the car into the catalog (cars array).</p>\n<p>To run the test you need to make sure that in the <em>karma-unit.conf.js</em> you have included all the javascript dependencies (full path) in the <em>files</em> array (in our case: angular, angular-mocks, angular-sanitize and the scripts.js – basically what you have also in the index.html)</p>\n<p>Run the test with: <em>&gt; grunt test</em></p>\n<p><strong id=\"a-testd\">&nbsp;</strong></p>\n<h3>Test the directive</h3>\n<p>Create the file <em>displayCar-spec.js</em> and edit it:</p>\n<div><div id=\"highlighter_724448\" class=\"syntaxhighlighter  jscript\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"jscript string\">'use strict'</code><code class=\"jscript plain\">;</code></div><div class=\"line number2 index1 alt1\">&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"jscript plain\">describe(</code><code class=\"jscript string\">\"directive: displayCar\"</code><code class=\"jscript plain\">, </code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">() {</code></div><div class=\"line number4 index3 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript keyword\">var</code> <code class=\"jscript plain\">scope,</code></div><div class=\"line number5 index4 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">filter,</code></div><div class=\"line number6 index5 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">service,</code></div><div class=\"line number7 index6 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">element,</code></div><div class=\"line number8 index7 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">template = </code><code class=\"jscript string\">'&lt;div display-car car=\"car\"&gt;&lt;/div&gt;'</code><code class=\"jscript plain\">,</code></div><div class=\"line number9 index8 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">testCar = {</code></div><div class=\"line number10 index9 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">name: </code><code class=\"jscript string\">\"test car\"</code><code class=\"jscript plain\">,</code></div><div class=\"line number11 index10 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">year: </code><code class=\"jscript string\">\"2015\"</code><code class=\"jscript plain\">,</code></div><div class=\"line number12 index11 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">desc: </code><code class=\"jscript string\">\"test desc\"</code></div><div class=\"line number13 index12 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">};</code></div><div class=\"line number14 index13 alt1\">&nbsp;</div><div class=\"line number15 index14 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//Load the module that has the directive</code></div><div class=\"line number16 index15 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">beforeEach(module(</code><code class=\"jscript string\">\"carApp\"</code><code class=\"jscript plain\">));</code></div><div class=\"line number17 index16 alt2\">&nbsp;</div><div class=\"line number18 index17 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">beforeEach(inject(</code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">($rootScope, $compile, $filter, carFormatMultilineText) {</code></div><div class=\"line number19 index18 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">scope = $rootScope.$</code><code class=\"jscript keyword\">new</code><code class=\"jscript plain\">();</code></div><div class=\"line number20 index19 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//Compile the HTML into a directive</code></div><div class=\"line number21 index20 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">scope.car = testCar;</code></div><div class=\"line number22 index21 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">element = $compile(angular.element(template))(scope);</code></div><div class=\"line number23 index22 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">scope.$digest();</code></div><div class=\"line number24 index23 alt1\">&nbsp;</div><div class=\"line number25 index24 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//Save a reference to the $filter service to use the custom 'carFormatName' filter</code></div><div class=\"line number26 index25 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">filter = $filter;</code></div><div class=\"line number27 index26 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//Load the custom 'carFormatMultilineText' service</code></div><div class=\"line number28 index27 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">service = carFormatMultilineText;</code></div><div class=\"line number29 index28 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">}));</code></div><div class=\"line number30 index29 alt1\">&nbsp;</div><div class=\"line number31 index30 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">it(</code><code class=\"jscript string\">\"should create an isolate scope with the car object\"</code><code class=\"jscript plain\">, </code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">() {</code></div><div class=\"line number32 index31 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript keyword\">var</code> <code class=\"jscript plain\">iscope = element.isolateScope();</code></div><div class=\"line number33 index32 alt2\">&nbsp;</div><div class=\"line number34 index33 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//Check the directives scope</code></div><div class=\"line number35 index34 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">expect(iscope.carObj).toEqual(testCar);</code></div><div class=\"line number36 index35 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">});</code></div><div class=\"line number37 index36 alt2\">&nbsp;</div><div class=\"line number38 index37 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">it(</code><code class=\"jscript string\">\"should create the correct HTML with the right content\"</code><code class=\"jscript plain\">, </code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">() {</code></div><div class=\"line number39 index38 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">expect(element.find(</code><code class=\"jscript string\">\"strong\"</code><code class=\"jscript plain\">).text()).toBe(filter(</code><code class=\"jscript string\">\"carFormatName\"</code><code class=\"jscript plain\">)(testCar.name));</code></div><div class=\"line number40 index39 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">expect(element.find(</code><code class=\"jscript string\">\"span\"</code><code class=\"jscript plain\">).text()).toBe(testCar.year);</code></div><div class=\"line number41 index40 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">expect(element.find(</code><code class=\"jscript string\">\"blockquote\"</code><code class=\"jscript plain\">).html()).toBe(service(testCar.desc));</code></div><div class=\"line number42 index41 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">});</code></div><div class=\"line number43 index42 alt2\"><code class=\"jscript plain\">});</code></div></div></td></tr></tbody></table></div></div>\n<p>Run the test with: <em>&gt; grunt test</em></p>\n<p><strong id=\"a-tests\">&nbsp;</strong></p>\n<h3>Test the service</h3>\n<p>Create the file <em>carFormatMultilineText-spec.js</em> and edit it:</p>\n<div><div id=\"highlighter_876001\" class=\"syntaxhighlighter  jscript\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"jscript string\">'use strict'</code><code class=\"jscript plain\">;</code></div><div class=\"line number2 index1 alt1\">&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"jscript plain\">describe(</code><code class=\"jscript string\">\"service: carFormatMultilineText\"</code><code class=\"jscript plain\">, </code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">() {</code></div><div class=\"line number4 index3 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript keyword\">var</code> <code class=\"jscript plain\">service,</code></div><div class=\"line number5 index4 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">text = </code><code class=\"jscript string\">\"Hello\\nThis is a test\\nA multiline text\"</code><code class=\"jscript plain\">;</code></div><div class=\"line number6 index5 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number7 index6 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//Load the module that has the service</code></div><div class=\"line number8 index7 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">beforeEach(module(</code><code class=\"jscript string\">\"carApp\"</code><code class=\"jscript plain\">));</code></div><div class=\"line number9 index8 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number10 index9 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//Load the service we want to test</code></div><div class=\"line number11 index10 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">beforeEach(inject(</code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">(carFormatMultilineText) {</code></div><div class=\"line number12 index11 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">service = carFormatMultilineText;</code></div><div class=\"line number13 index12 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">}));</code></div><div class=\"line number14 index13 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number15 index14 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">it(</code><code class=\"jscript string\">\"should format multiline text by replacing the newline character with &lt;br&gt;\"</code><code class=\"jscript plain\">, </code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">() {</code></div><div class=\"line number16 index15 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">expect(service(text)).toBe(</code><code class=\"jscript string\">\"Hello&lt;br&gt;This is a test&lt;br&gt;A multiline text\"</code><code class=\"jscript plain\">);</code></div><div class=\"line number17 index16 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">});</code></div><div class=\"line number18 index17 alt1\"><code class=\"jscript plain\">});</code></div></div></td></tr></tbody></table></div></div>\n<p>Here we load the service and pass a test text to see if the new line characters (\\n) are replaced with &lt;br&gt;.</p>\n<p>Run the test with: <em>&gt; grunt test</em></p>\n<p><strong id=\"a-testf\">&nbsp;</strong></p>\n<h3>Test the filter</h3>\n<p>Create the file <em>carFormatName-spec.js</em> and edit it:</p>\n<div><div id=\"highlighter_331846\" class=\"syntaxhighlighter  jscript\"><div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"jscript string\">'use strict'</code><code class=\"jscript plain\">;</code></div><div class=\"line number2 index1 alt1\">&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"jscript plain\">describe(</code><code class=\"jscript string\">\"filter: carFormatName\"</code><code class=\"jscript plain\">, </code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">() {</code></div><div class=\"line number4 index3 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript keyword\">var</code> <code class=\"jscript plain\">filter,</code></div><div class=\"line number5 index4 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">text = </code><code class=\"jscript string\">\"Test text!\"</code><code class=\"jscript plain\">;</code></div><div class=\"line number6 index5 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number7 index6 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//Load the module that has the filter</code></div><div class=\"line number8 index7 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">beforeEach(module(</code><code class=\"jscript string\">\"carApp\"</code><code class=\"jscript plain\">));</code></div><div class=\"line number9 index8 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number10 index9 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript comments\">//Load the filter service so that we can access our 'carFormatName' filter</code></div><div class=\"line number11 index10 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">beforeEach(inject(</code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">($filter) {</code></div><div class=\"line number12 index11 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">filter = $filter(</code><code class=\"jscript string\">\"carFormatName\"</code><code class=\"jscript plain\">);</code></div><div class=\"line number13 index12 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">}));</code></div><div class=\"line number14 index13 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number15 index14 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">it(</code><code class=\"jscript string\">\"should convert the string to uppercase letters\"</code><code class=\"jscript plain\">, </code><code class=\"jscript keyword\">function</code><code class=\"jscript plain\">() {</code></div><div class=\"line number16 index15 alt1\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">expect(filter(text)).toBe(</code><code class=\"jscript string\">\"TEST TEXT!\"</code><code class=\"jscript plain\">);</code></div><div class=\"line number17 index16 alt2\"><code class=\"jscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"jscript plain\">});</code></div><div class=\"line number18 index17 alt1\"><code class=\"jscript plain\">});</code></div></div></td></tr></tbody></table></div></div>\n<p>This test is similar to our service test: load the <em>$filter</em> native service to access our <em>carFormatName </em>filter then pass a test text to it and verify the output.</p>\n<p>Run the test with: <em>&gt; grunt test</em>, the result should be as follows:</p>\n<blockquote><p>Running “karma:unit” (karma) task<br>\nINFO [karma]: Karma v0.12.31 server started at http://localhost:8081/<br>\nINFO [launcher]: Starting browser PhantomJS<br>\nINFO [PhantomJS 1.9.8 (Windows 8)]: Connected on socket JIkgW0YTOkwblm_u9rpS with id 29182540</p>\n<p>controller: carCtrl<br>\n√ should add a new car into the catalogue</p>\n<p>service: carFormatMultilineText<br>\n√ should format multiline text by replacing the newline character with</p>\n<p>filter: carFormatName<br>\n√ should convert the string to uppercase letters</p>\n<p>directive: displayCar<br>\n√ should create an isolate scope with the car object<br>\n√ should create the correct HTML with the right content</p>\n<p>A suite<br>\n√ contains spec with an expectation</p>\n<p>PhantomJS 1.9.8 (Windows 8): Executed 6 of 6 SUCCESS (0.081 secs / 0.034 secs)</p>\n<p>Done, without errors.</p></blockquote>\n<p>We have written 6 tests all together and all of them were executed with success.</p>\n<p>If you want to read more about testing AngularJS with Jasmine, find these articles useful:<br>\n- <a href=\"https://docs.angularjs.org/guide/unit-testing\" target=\"_blank\">AngularJS.org: AngularJS unit testing</a><br>\n- <a href=\"http://www.smashingmagazine.com/2014/10/07/introduction-to-unit-testing-in-angularjs/\" target=\"_blank\">Smashing Magazine’s article: Introduction to unit testing in angularjs</a></p>\n<p><strong>You can download all the files (except the npm modules) for this tutorial <a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/Unit-testing-AngularJS-applications-with_Jasmine-and-Karma.zip\">here</a></strong>.</p>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/03/puma-request2-300x179.png", "https://weblog.endava.com/user-experience-practice/files/2015/03/puma-request-300x218.png", "https://weblog.endava.com/user-experience-practice/files/2015/01/uixswat-150x150.png"]
        },
        {
            "id": "4",
            "title": "UI/UX mystery – funny messages on internal projects – puma",
            "author": "Bogdan Nastasa",
            "published": "10-03-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/03/puma-request-572x350.png",
            "description": "Hi, Early days I tried to help one of my colleagues to make a Puma request. But on my journey on filling the fields from the form I discovered this awesome alert message: “Business Unit, Foreign Key – REQUISITIONS”. ",
            "content": "<p>Hi,<br>\nEarly days I tried to help one of my colleagues to make a <a href=\"https://hris.endava.com/HRnet/Application/Main.aspx\" target=\"_blank\">Puma </a>request. But on my journey on filling the fields from the form I discovered this <em>awesome</em> alert message: <em><strong>“Business Unit, Foreign Key – REQUISITIONS”.&nbsp;</strong></em><br>\n<img alt=\"say what?\" src=\"http://www.reactiongifs.com/r/saywha.gif\"></p>\n<p>Screenshots from Puma:</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/puma-request.png\"><img class=\"alignnone size-medium wp-image-394\" alt=\"puma-request\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/puma-request-300x218.png\" width=\"300\" height=\"218\"></a><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/puma-request2.png\"><img class=\"alignleft size-medium wp-image-405\" alt=\"puma-request2\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/puma-request2-300x179.png\" width=\"300\" height=\"179\"></a></p>\n<p>&nbsp;</p>\n<p><strong style=\"color: #800080\"><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/01/uixswat.png\"><img class=\"alignleft size-thumbnail wp-image-188\" alt=\"uixswat\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/01/uixswat-150x150.png\" width=\"150\" height=\"150\"></a></strong></p>\n<p><span style=\"color: #800080\"><strong><span style=\"color: #000000\">What we suggest:</span></strong></span> imagine that the user is not a <a href=\"https://www.google.ro/search?q=techy+guy&amp;biw=1366&amp;bih=677&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ei=5yP_VPGXAoveU7HUgbAG&amp;ved=0CAYQ_AUoAQ\" target=\"_blank\">techy </a>&nbsp; &nbsp;guy/girl. Example: <strong>“You already added a Business Unit : CLD”</strong></p>\n<p><strong></strong>…and in the end you can add something like: “<em>Thank you for shopping with PUMA. Have a lovely day</em>” <img src=\"https://weblog.endava.com/user-experience-practice/wp-includes/images/smilies/icon_smile.gif\" alt=\":)\" class=\"wp-smiley\"> </p>",
            "gallery": []
        },
        {
            "id": "5",
            "title": "Css preprocessors & postprocessors",
            "author": "Claudia Mihu",
            "published": "09-03-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/03/sass.png",
            "description": "Css preproccessors Css preproccessors  parse and compile a CSS extension language into plain CSS. Their common features are: functions, variables, mixins, inheritance, colour functions, math operations, nested selector, can extend other css files.",
            "content": "<p><b>Css preproccessors</b></p>\n<p>Css preproccessors &nbsp;parse and <b>compile</b> a CSS extension language into plain CSS.</p>\n<p>Their common features are: functions, variables, mixins, inheritance, colour functions, math operations, nested selector, can extend other css files.</p>\n<p>CSS preprocessors report errors and support comments, but&nbsp; after minified compile, the comments are removed.</p>\n<p>A couple of the most popular CSS preprocessors&nbsp; , compared :</p>\n<table style=\"width: 100%;font-size:11px\">\n<tbody>\n<tr>\n<th></th>\n<th style=\"width:130px\">Saas/Scss<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/sass.png\"><img class=\"alignnone size-full wp-image-298\" alt=\"sass\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/sass.png\" width=\"130\" height=\"48\"></a></th>\n<th style=\"width:120px\">Less<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/less.png\"><img class=\"alignnone size-full wp-image-299\" alt=\"less\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/less.png\" width=\"120\" height=\"82\"></a></th>\n<th>Stylus<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/stylus.jpg\"><img class=\"alignnone size-full wp-image-300\" alt=\"stylus\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/stylus.jpg\" width=\"120\" height=\"63\"></a></th>\n<th>Css Crush<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/csscrush.jpg\"><img class=\"alignnone size-full wp-image-301\" alt=\"csscrush\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/csscrush.jpg\" width=\"120\" height=\"85\"></a></th>\n<th>Myth<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/myth.jpg\"><img class=\"alignnone size-full wp-image-302\" alt=\"myth\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/myth.jpg\" width=\"120\" height=\"74\"></a></th>\n</tr>\n<tr>\n<td>Gene-ralities</td>\n<td><span style=\"line-height: 19px\">conservative; designer-friendly language</span><span style=\"line-height: 19px\"><br>\n.saas /.scss extension</span></td>\n<td>Inspired from Saas;<br>\nSimplifies your stylesheets;<br>\nDoes not try to be a programming language;</td>\n<td><strong>RTL</strong> (right-to-left) support<br>\noptional semi-colons, colons, braces, commas<br>\n<code>.styl</code>&nbsp;extension</td>\n<td>Variables can also be injected at runtime;<br>\nUse symbol “&amp;” for placing the parent selector explicitly.<br>\nPHP based</td>\n<td>Pure CSS;<br>\nBuilt with rework</td>\n</tr>\n<tr>\n<td>Runs on</td>\n<td>Server side</td>\n<td>Both server side and Client side(&nbsp;inside Node, in the browser and inside Rhino)</td>\n<td>Server side</td>\n<td>Server side</td>\n<td>Server side</td>\n</tr>\n<tr>\n<td>Instal</td>\n<td>Needs Ruby<br>\nsudo su -c “gem install sass”</td>\n<td>Node.js<br>\n$ npm install -g less</td>\n<td>Node.js<br>\n$&nbsp;npm&nbsp;install&nbsp;stylus&nbsp;-g</td>\n<td>Needs Composer<br>\nbrew install css-crush</td>\n<td>Node.js<br>\nnpm&nbsp;install&nbsp;-g&nbsp;myth</td>\n</tr>\n<tr>\n<td>Speed</td>\n<td>fast</td>\n<td>Slower than Saas</td>\n<td></td>\n<td></td>\n<td>Very fast</td>\n</tr>\n<tr>\n<td>Vars<br>\npreceeded<br>\nby</td>\n<td>$</td>\n<td>@</td>\n<td>-</td>\n<td>Automatically generatedDeclare variables in your CSS with&nbsp;<code>@set</code>&nbsp;directive</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Libraries built&nbsp;on top of this</td>\n<td>Compass</td>\n<td>Less Hat<br>\nLess Elements</td>\n<td>Nib</td>\n<td>Aria<br>\nCanvas</td>\n<td>Myth-loader</td>\n</tr>\n<tr>\n<td>Cons</td>\n<td>cross-browser fixes;<br>\nadvanced metaprogramming in your stylesheets;<br>\nAnother scripting language to learn;<br>\nPotential for mixing too much logic in CSS.<br>\nMay find limiting compared to a full scripting language</td>\n<td>not ideal when you want someone else to handle browser (in)compatibilities</td>\n<td>Not popular,<br>\nhard to integrate community plugins<br>\nHackers-appropriate (you can use your own selectors)<br>\n=&gt; Sometimes not very clear if you remove optional separators;</td>\n<td>In some cases (e.g. CSS3 gradients) final syntax is incompatible with older prefixed syntax;<br>\nNeed to know PHP<br>\nLess convenient</td>\n<td></td>\n</tr>\n<tr>\n<td>Pros</td>\n<td>higher-level library of mixins;</td>\n<td>It is simple so you can learn it fast;<br>\npopular;<br>\nin browser compilation</td>\n<td>Very flexible</td>\n<td>Auto prefixesEasy to maintain;<br>\nComplicated logic kept out of CSS</td>\n<td>just simple css;<br>\nYou can write css that’s not yet supported by all browsers and it transforms it&nbsp; into standard Css.<br>\nOffers debugging tool;<br>\nsuggests fixes.</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Other css preprocessor examples&nbsp;&nbsp;&nbsp;are :</p>\n<ul>\n<li>AbsurdJs,</li>\n</ul>\n<ul>\n<li>Roole(that runs both client side and server side),</li>\n</ul>\n<ul>\n<li>Prepros, Clay (that is implementd in Haskell),</li>\n</ul>\n<ul>\n<li>Switch Css (that runs under Apache),</li>\n</ul>\n<ul>\n<li>Hitch.</li>\n</ul>\n<p>There are also &nbsp;some PHP based preprocessors:</p>\n<ul>\n<li>Pcss (server side),</li>\n</ul>\n<ul>\n<li>Turbine,</li>\n</ul>\n<ul>\n<li>Css pre-processor,</li>\n</ul>\n<ul>\n<li>DtCss,</li>\n</ul>\n<ul>\n<li>Css Crush.</li>\n</ul>\n<p>Css preprocessors &nbsp;can save a lot of time and have some very useful features.</p>\n<p>&nbsp;</p>\n<p><strong>Css post</strong><b>processors</b></p>\n<p><strong>Css post</strong>processors parse and <b>process</b> CSS. They parse your CSS and add vendor prefixes and are ideal for cross-browser fixes like &nbsp;polyfills*.</p>\n<p>Rework is considered both css preprocessor and css postprocessor because it is so flexible and has an extensive plugins collection.</p>\n<table style=\"width: 100%;font-size:11px\">\n<tbody>\n<tr>\n<th></th>\n<th>Pleeease<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/pleeease.jpg\"><img class=\"alignnone size-full wp-image-303\" alt=\"pleeease\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/pleeease.jpg\" width=\"265\" height=\"92\"></a></th>\n<th>Autoprefixer<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/autoprefix.jpg\"><img class=\"alignnone size-full wp-image-304\" alt=\"autoprefix\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/autoprefix.jpg\" width=\"259\" height=\"104\"></a></th>\n<th>PostCss<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/PostCss.jpg\"><img class=\"alignnone size-full wp-image-305\" alt=\"PostCss\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/PostCss.jpg\" width=\"195\" height=\"100\"></a></th>\n<th>Rework</th>\n</tr>\n<tr>\n<td>&nbsp;Generalities</td>\n<td>A node.js app;<br>\nclean stylesheets;<br>\nsupports older browsers;<br>\nbetter maintenability<br>\nincreases browser support;<br>\nbased on autoprefixer;<br>\ngenerates soucemaps from preprocessors to postprocessors</td>\n<td>Adds vendor prefixes to CSS rules&nbsp;using the&nbsp;<a href=\"http://caniuse.com/\">Can I Use</a>&nbsp;database(that contains browser popularity);<br>\ncan be easily integrated with Sass and Stylus;<br>\nsupports &nbsp;Ruby on Rails,Middleman, Mincer, Grunt, Sublime Text</td>\n<td>Transforming CSS with JS plugins.<br>\nIncludes functionalities of Saas,less and Stylus plus<br>\nIt includes only a CSS parser, a CSS node tree API, a&nbsp;source&nbsp;map generator, and a node tree stringifier</td>\n<td>Automate vendor prefixing;create your own properties, inline images;<br>\na module that accepts a string of CSS, produces a CSS abstract syntax tree (AST), and provides an API for manipulating that AST;<br>\nused by Twitter;<br>\nconsidered a postprocessor in<br>\n<a href=\"http://twin.github.io/css-pre-vs-post-processing/\">http://twin.github.io/css-pre-vs-post-processing/</a><br>\nbut also preprocessor in other places\n</td>\n</tr>\n<tr>\n<td>&nbsp;Installation</td>\n<td>Browser configuration Node.Js<br>\n$ npm install -g pleeease-cli</td>\n<td>gruntnpm&nbsp;install&nbsp;grunt-autoprefixer&nbsp;–save-dev</td>\n<td>&nbsp;JS plugins;grunt , gulp, webpack</td>\n<td>Node.js<br>\n$ npm install rework</td>\n</tr>\n<tr>\n<td>&nbsp;Speed/<br>\nPerformance</td>\n<td>reduces&nbsp;<b>calc()</b>&nbsp;whenever possible and other features can be disabled for speed</td>\n<td>&nbsp;After <a href=\"http://fotorama.io/\">http://fotorama.io/</a> switched from Compass to Autoprefixer, the CSS file size&nbsp;<a href=\"https://twitter.com/fotoramajs/status/362686759944982528\">decreased</a>&nbsp;by almost 20%.</td>\n<td>Very fast;<br>\n<em>40 times faster</em>&nbsp;than Ruby<br>\nSass compilation</td>\n</tr>\n<tr>\n<td>&nbsp;Plugins<br>\non top<br>\nof this</td>\n<td>&nbsp;Please.Next</td>\n<td>Sublime text<br>\nBrackets<br>\nAtom Editor<br>\n<span style=\"line-height: 19px\">Pleeease</span></td>\n<td>&nbsp;Css next – for future CSS code</td>\n<td>Styl<br>\nResin<br>\nMyth</td>\n</tr>\n<tr>\n<td>&nbsp;Cons</td>\n<td></td>\n<td>&nbsp;No interface so some prefixes may get created in a wrong way;<br>\nDoesn’t add polyfills;<br>\nAdds old Flexbox syntax</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>&nbsp;Pros</td>\n<td>cross-browser fixes;<br>\neasy way to combine preprocessors and postprocessors;<br>\nAllows you to override many options in one go;<br>\nCan be disabled in some parts of Css</td>\n<td>also fixes the &nbsp;syntax differences when adds prefixes;<br>\ncan be enabled from Visual studio:<br>\n tools&gt;options&gt; web essentials&gt;css&gt;<br>\nenable Autoprefixer<br>\ncleans outdated prefixes;</td>\n<td>Modular RTLCSS (right to left) module mirrors stylesheet by swapping left and right&nbsp; parts</td>\n<td>&nbsp;Rich collection of plugins;<br>\nflexible</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n<p><strong>Bibliography</strong></p>\n<p><a href=\"http://twin.github.io/css-pre-vs-post-processing/\">http://twin.github.io/css-pre-vs-post-processing/</a></p>\n<p><a href=\"http://code.tutsplus.com/tutorials/sass-vs-less-vs-stylus-preprocessor-shootout--net-24320\">http://code.tutsplus.com/tutorials/sass-vs-less-vs-stylus-preprocessor-shootout–net-24320</a></p>\n<p><a href=\"http://feedback.livereload.com/knowledgebase/articles/86227-choosing-a-css-preprocessor\">http://feedback.livereload.com/knowledgebase/articles/86227-choosing-a-css-preprocessor</a></p>\n<p><a href=\"https://github.com/reworkcss/rework\">https://github.com/reworkcss/rework</a></p>\n<p><a href=\"http://tjholowaychuk.tumblr.com/post/44267035203/modular-css-preprocessing-with-rework\">http://tjholowaychuk.tumblr.com/post/44267035203/modular-css-preprocessing-with-rework</a></p>\n<p><a href=\"https://www.google.ro/?gws_rd=cr,ssl&amp;ei=dlP9VKn0AoXcao_wgNgG#q=postCSS\">https://www.google.ro/?gws_rd=cr,ssl&amp;ei=dlP9VKn0AoXcao_wgNgG#q=postCSS</a></p>\n<p><a href=\"http://nicolasgallagher.com/custom-css-preprocessing/\">http://nicolasgallagher.com/custom-css-preprocessing/</a></p>\n<p><a href=\"http://www.sitepoint.com/6-current-options-css-preprocessors/\">http://www.sitepoint.com/6-current-options-css-preprocessors/</a></p>\n<p><a href=\"http://pleeease.io/\">http://pleeease.io/</a></p>\n<p><a href=\"https://gist.github.com/peteboere/8419143\">https://gist.github.com/peteboere/8419143</a></p>\n<p><a href=\"http://codegeekz.com/css-preprocessors-to-speed-up-your-coding/\">http://codegeekz.com/css-preprocessors-to-speed-up-your-coding/</a></p>\n<p><a href=\"https://github.com/postcss/autoprefixer\">https://github.com/postcss/autoprefixer</a></p>\n<p><a href=\"https://github.com/segmentio/myth\">https://github.com/segmentio/myth</a></p>\n<p>*<a href=\"https://remysharp.com/2010/10/08/what-is-a-polyfill\">https://remysharp.com/2010/10/08/what-is-a-polyfill</a></p>",
            "gallery": []
        },
        {
            "id": "6",
            "title": "Using the FLEXBOX property",
            "author": "Alina Cirja Ungur",
            "published": "12-02-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-11.png",
            "description": "Flexbox is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids. The CSS3 Flexible Box, or flexbox",
            "content": "<p><strong><em>Flexbox</em></strong> is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids.</p>\n<p>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. For many applications, the flexible box model provides an improvement over the block model in that it does not use floats, nor do the flex container’s margins collapse with the margins of its contents.<br>\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”).<br>\nIf regular layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout.</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\"><img class=\"aligncenter size-full wp-image-260\" alt=\"flexbox\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\" width=\"816\" height=\"339\"></a><br>\nBasically, items will be laid out following either the main axis (from main-start to main-end) or the cross axis (from cross-start to cross-end).<br>\n- <strong>main axis</strong> – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the flex-direction property (see below).<br>\n- <strong>main-start | main-end</strong> – The flex items are placed within the container starting from main-start and going to main-end.<br>\n- <strong>main size</strong> – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.<br>\n-<strong> cross axis</strong> – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.<br>\n- <strong>cross-start | cross-end</strong> – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.<br>\n- <strong>cross size</strong> – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.</p>\n<p>And now an<strong> example</strong>: <a href=\"http://jsfiddle.net/5juvd835/\">http://jsfiddle.net/5juvd835/</a></p>\n<p>Desktop layout:<br>\n<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop.jpg\"><img class=\"alignleft size-medium wp-image-261\" alt=\"flexbox-desktop\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg\" width=\"300\" height=\"278\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Mobile layout:</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile.jpg\"><img class=\"alignleft size-medium wp-image-262\" alt=\"flexbox-mobile\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg\" width=\"189\" height=\"300\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>See the browser support here: <a href=\"http://caniuse.com/#feat=flexbox\">http://caniuse.com/#feat=flexbox</a></p>\n<p>For more information check one of the following articles:<br>\n<a href=\"http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived\">http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived</a><br>\n<a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">http://css-tricks.com/snippets/css/a-guide-to-flexbox/</a><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a></p>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg"]
        }
    ]
}