{
    "articles": [
        { 
            "id": "1",
            "title": "UX Mystery – Skill Matrix",
            "author": "Bogdan Nastasa",
            "published": "30-03-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/03/skill_matrix_main.png",
            "description": "Yes! It’s the period when you need to update your Skill Matrix. I know you are a busy person and you don’t have time to read/fill all~ 750 skills but we all need to allocate some time for this awesome",
            "content": "<p>Yes! It’s the period when you need to update your Skill Matrix. I know you are a busy person and you don’t have time to read/fill all~ 750 skills but we all need to allocate some time for this awesome app. Today one of our colleague, Dragos,  tried to do SkillMatrix but seems the app have a surprise for him. The “Other” field appear in Core skill category. What Other means? Can you please help me to clarify this field? :) Anyway…you can be an EXPERT in OTHER!</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/other-skill-matrix.png\"><img class=\"alignleft size-full wp-image-468\" alt=\"other-skill-matrix\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/other-skill-matrix.png\" width=\"998\" height=\"331\"></a></p>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/03/other-skill-matrix.png"]
        },
        { 
            "id": "2",            
            "title": "jQuery Trickshots eBook",
            "author": "Bogdan Nastasa",
            "published": "19-03-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/03/jquery-trickshots-687x350.png",
            "description": "Meet jQuery Trickshots eBook.   Inside it, you will find a collection of 100 kickass tips and tricks for working with jQuery that I have discovered over the years as a JavaScript developer and author for Tutorialzine",
            "content": "<div><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/jquery-trickshots.png\"><img class=\"alignleft size-medium wp-image-454\" alt=\"jquery-trickshots\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/jquery-trickshots-280x300.png\" width=\"280\" height=\"300\"></a></div>\n<div>Meet <a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/jQuery-Trickshots.zip\" target=\"_blank\"><strong>jQuery Trickshots eBook.</strong></a></div>\n<div>Inside it, you will find a collection of 100 kickass tips and tricks for working with jQuery that I have discovered over the years as a JavaScript developer and author for Tutorialzine Some highlights from jQuery Trickshots 100 Advanced Techniques Based on hands-on knowledge from the author’s personal experience as a JavaScript programmer, you’ll get a large collection of incredibly useful tips and tricks. Perfect for All Skill Levels This book works for all skill levels, offering neat tricks, awesome plugins, and various tips on using and abusing the incredible jQuery library. Easy to Follow Learn how to completely level the playing field and easily work around browser differences through the simple use of jQuery. <p>Download the ebook 2015 edition(pdf, epub, mobi + html/js samples)</p></div>",
            "gallery": []
        },
        {
            "id": "3",
            "title": "Unit testing AngularJS applications with Jasmine and Karma",
            "author": "Istvan Trombitas",
            "published": "12-03-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/03/unit-testing-with-karma-jasmine-for-angularjs-2-500x350.png",
            "description": "Working with AngularJS at a certain point you inevitable run into the need for creating unit tests for the directives, services, filters and controllers you’ve created. ",
            "content": "<div><div><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/unit-testing-with-karma-jasmine-for-angularjs-2.png\"><img class=\"alignleft size-medium wp-image-431\" alt=\"unit-testing-with-karma-jasmine-for-angularjs-2\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/unit-testing-with-karma-jasmine-for-angularjs-2-300x240.png\" width=\"300\" height=\"240\"></div></a><div>Working with AngularJS at a certain point you inevitable run into the need for creating unit tests for the directives, services, filters and controllers you’ve created.This tutorial shows how to set up an AngularJS application and then how write and run unit tests for it. It will be a long article but it will mark the places where you can take a short break, so you can continue fresh. We gathered all the files in a <a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/Unit-testing-AngularJS-applications-with_Jasmine-and-Karma.zip\">zip</a>, but you better start the tutorial step by step to understand it fully </div>\n</div>\n<h2>Table of contents:</h2>\n<div>- <a href=\"#a-intro\">Introduction: basic installations</a><br>\n- <a href=\"#a-settingajs\">Setting up AngularJS</a><br>\n- <a href=\"#a-createapp\">Create the application</a><br>\n- <a href=\"#a-unittenv\">The unit testing environment</a><br>\n- <a href=\"#a-simpletest\">Writing a simple test</a><br>\n- <a href=\"#a-runningtest\">Running tests</a><br>\n- <a href=\"#a-testsforang\">Writing tests for our AngularJS application</a><br>\n- <a href=\"#a-testc\">Test the controller</a><br>\n- <a href=\"#a-testd\">Test the directive</a><br>\n- <a href=\"#a-tests\">Test the service</a><br>\n- <a href=\"#a-testf\">Test the filter</a></p>\n<div>\n<p>The technologies we will use:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/\" target=\"_blank\">NPM</a> (node package manager)</li>\n<li><a href=\"http://gruntjs.com/\" target=\"_blank\">Grunt</a> (Javascript taskrunner) – optional</li>\n<li><a href=\"http://bower.io/\" target=\"_blank\">Bower</a> (Dependency manager) – optional</li>\n<li><a href=\"https://angularjs.org/\" target=\"_blank\">AngularJS</a></li>\n<li><a href=\"http://jasmine.github.io/\" target=\"_blank\">Jasmine</a> (Javascript testing framework)</li>\n<li><a href=\"http://karma-runner.github.io/0.12/index.html\" target=\"_blank\">Karma</a> (Javascript test runner)</li>\n<li><a href=\"http://phantomjs.org/\" target=\"_blank\">PhantomJS</a> – Headless WebKit scriptable with a JavaScript API (run the tests without a real browser)</li>\n</ul>\n<div>Note: Grunt and Bower are optional, and if you don’t want to use them, you can skip the parts that are related to these tools. We use them because they are really cool and make the development become easier and faster. We start with installing node.js (if you haven’t already) then Grunt and Bower: Install node.js from here for Mac or Windows, and for Linux check this link. After the install you can check its version by typing: > node -v Node.js comes with npm installed, but npm gets updated more frequently than node.js, so sometimes you might want to run: > npm install npm -g to get the latest version. To install Grunt insert the following line in package.json’s devDependencies object: “grunt”: “~0.4.5″ and then run: > npm install, or you can directly install Grunt with npm: > npm install grunt –save-dev, this will install it locally and insert the above mentioned line into the package.json. More about installing Grunt globally you can find here. To install Bower locally run the following: > npm install bower –save-dev, this will insert the following line into the package.json: “bower”: “^1.3.12″. More about installing Bower globally you can read here. Create the application After all the necessary files and settings are in their right place, let’s create a nice little application called Car catalog, where you can add cars using a form and the application displays them in a nice format. Nothing big and fancy, but enough to see the use of the different AngularJS components (controller, services, directives, filters) Download the index.html and scripts.js from here and copy them to the /app directory Open scripts.js: as you can see there is a module created (carModule), and then a controller (carCtrl), a service (carFormatMultilineText), a directive (displayCar) and a filter (carFormatName) are registered to it Run the application by opening the index.html in the browser You can play a bit with them and examine the source code to find out the usage of the above mentioned components. (Question: where is ngSanitize used?) We have created an AngularJS application where Bower is used for library dependencies. Wasn’t that difficult, was it? (You can take a break now)</div>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/03/puma-request2-300x179.png", "https://weblog.endava.com/user-experience-practice/files/2015/03/puma-request-300x218.png", "https://weblog.endava.com/user-experience-practice/files/2015/01/uixswat-150x150.png"]
        },
        {
            "id": "4",
            "title": "UI/UX mystery – funny messages on internal projects – puma",
            "author": "Bogdan Nastasa",
            "published": "10-03-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/03/puma-request-572x350.png",
            "description": "Hi, Early days I tried to help one of my colleagues to make a Puma request. But on my journey on filling the fields from the form I discovered this awesome alert message: “Business Unit, Foreign Key – REQUISITIONS”. ",
            "content": "<p>Hi,<br>\nEarly days I tried to help one of my colleagues to make a <a href=\"https://hris.endava.com/HRnet/Application/Main.aspx\" target=\"_blank\">Puma </a>request. But on my journey on filling the fields from the form I discovered this <em>awesome</em> alert message: <em><strong>“Business Unit, Foreign Key – REQUISITIONS”.&nbsp;</strong></em><br>\n<img alt=\"say what?\" src=\"http://www.reactiongifs.com/r/saywha.gif\"></p>\n<p>Screenshots from Puma:</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/puma-request.png\"><img class=\"alignnone size-medium wp-image-394\" alt=\"puma-request\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/puma-request-300x218.png\" width=\"300\" height=\"218\"></a><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/puma-request2.png\"><img class=\"alignleft size-medium wp-image-405\" alt=\"puma-request2\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/puma-request2-300x179.png\" width=\"300\" height=\"179\"></a></p>\n<p>&nbsp;</p>\n<p><strong style=\"color: #800080\"><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/01/uixswat.png\"><img class=\"alignleft size-thumbnail wp-image-188\" alt=\"uixswat\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/01/uixswat-150x150.png\" width=\"150\" height=\"150\"></a></strong></p>\n<p><span style=\"color: #800080\"><strong><span style=\"color: #000000\">What we suggest:</span></strong></span> imagine that the user is not a <a href=\"https://www.google.ro/search?q=techy+guy&amp;biw=1366&amp;bih=677&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ei=5yP_VPGXAoveU7HUgbAG&amp;ved=0CAYQ_AUoAQ\" target=\"_blank\">techy </a>&nbsp; &nbsp;guy/girl. Example: <strong>“You already added a Business Unit : CLD”</strong></p>\n<p><strong></strong>…and in the end you can add something like: “<em>Thank you for shopping with PUMA. Have a lovely day</em>” <img src=\"https://weblog.endava.com/user-experience-practice/wp-includes/images/smilies/icon_smile.gif\" alt=\":)\" class=\"wp-smiley\"> </p>",
            "gallery": []
        },
        {
            "id": "5",
            "title": "Css preprocessors & postprocessors",
            "author": "Claudia Mihu",
            "published": "09-03-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/03/sass.png",
            "description": "Css preproccessors Css preproccessors  parse and compile a CSS extension language into plain CSS. Their common features are: functions, variables, mixins, inheritance, colour functions, math operations, nested selector, can extend other css files.",
            "content": "<p><b>Css preproccessors</b></p>\n<p>Css preproccessors &nbsp;parse and <b>compile</b> a CSS extension language into plain CSS.</p>\n<p>Their common features are: functions, variables, mixins, inheritance, colour functions, math operations, nested selector, can extend other css files.</p>\n<p>CSS preprocessors report errors and support comments, but&nbsp; after minified compile, the comments are removed.</p>\n<p>A couple of the most popular CSS preprocessors&nbsp; , compared :</p>\n<table style=\"width: 100%;font-size:11px\">\n<tbody>\n<tr>\n<th></th>\n<th style=\"width:130px\">Saas/Scss<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/sass.png\"><img class=\"alignnone size-full wp-image-298\" alt=\"sass\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/sass.png\" width=\"130\" height=\"48\"></a></th>\n<th style=\"width:120px\">Less<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/less.png\"><img class=\"alignnone size-full wp-image-299\" alt=\"less\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/less.png\" width=\"120\" height=\"82\"></a></th>\n<th>Stylus<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/stylus.jpg\"><img class=\"alignnone size-full wp-image-300\" alt=\"stylus\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/stylus.jpg\" width=\"120\" height=\"63\"></a></th>\n<th>Css Crush<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/csscrush.jpg\"><img class=\"alignnone size-full wp-image-301\" alt=\"csscrush\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/csscrush.jpg\" width=\"120\" height=\"85\"></a></th>\n<th>Myth<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/myth.jpg\"><img class=\"alignnone size-full wp-image-302\" alt=\"myth\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/myth.jpg\" width=\"120\" height=\"74\"></a></th>\n</tr>\n<tr>\n<td>Gene-ralities</td>\n<td><span style=\"line-height: 19px\">conservative; designer-friendly language</span><span style=\"line-height: 19px\"><br>\n.saas /.scss extension</span></td>\n<td>Inspired from Saas;<br>\nSimplifies your stylesheets;<br>\nDoes not try to be a programming language;</td>\n<td><strong>RTL</strong> (right-to-left) support<br>\noptional semi-colons, colons, braces, commas<br>\n<code>.styl</code>&nbsp;extension</td>\n<td>Variables can also be injected at runtime;<br>\nUse symbol “&amp;” for placing the parent selector explicitly.<br>\nPHP based</td>\n<td>Pure CSS;<br>\nBuilt with rework</td>\n</tr>\n<tr>\n<td>Runs on</td>\n<td>Server side</td>\n<td>Both server side and Client side(&nbsp;inside Node, in the browser and inside Rhino)</td>\n<td>Server side</td>\n<td>Server side</td>\n<td>Server side</td>\n</tr>\n<tr>\n<td>Instal</td>\n<td>Needs Ruby<br>\nsudo su -c “gem install sass”</td>\n<td>Node.js<br>\n$ npm install -g less</td>\n<td>Node.js<br>\n$&nbsp;npm&nbsp;install&nbsp;stylus&nbsp;-g</td>\n<td>Needs Composer<br>\nbrew install css-crush</td>\n<td>Node.js<br>\nnpm&nbsp;install&nbsp;-g&nbsp;myth</td>\n</tr>\n<tr>\n<td>Speed</td>\n<td>fast</td>\n<td>Slower than Saas</td>\n<td></td>\n<td></td>\n<td>Very fast</td>\n</tr>\n<tr>\n<td>Vars<br>\npreceeded<br>\nby</td>\n<td>$</td>\n<td>@</td>\n<td>-</td>\n<td>Automatically generatedDeclare variables in your CSS with&nbsp;<code>@set</code>&nbsp;directive</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Libraries built&nbsp;on top of this</td>\n<td>Compass</td>\n<td>Less Hat<br>\nLess Elements</td>\n<td>Nib</td>\n<td>Aria<br>\nCanvas</td>\n<td>Myth-loader</td>\n</tr>\n<tr>\n<td>Cons</td>\n<td>cross-browser fixes;<br>\nadvanced metaprogramming in your stylesheets;<br>\nAnother scripting language to learn;<br>\nPotential for mixing too much logic in CSS.<br>\nMay find limiting compared to a full scripting language</td>\n<td>not ideal when you want someone else to handle browser (in)compatibilities</td>\n<td>Not popular,<br>\nhard to integrate community plugins<br>\nHackers-appropriate (you can use your own selectors)<br>\n=&gt; Sometimes not very clear if you remove optional separators;</td>\n<td>In some cases (e.g. CSS3 gradients) final syntax is incompatible with older prefixed syntax;<br>\nNeed to know PHP<br>\nLess convenient</td>\n<td></td>\n</tr>\n<tr>\n<td>Pros</td>\n<td>higher-level library of mixins;</td>\n<td>It is simple so you can learn it fast;<br>\npopular;<br>\nin browser compilation</td>\n<td>Very flexible</td>\n<td>Auto prefixesEasy to maintain;<br>\nComplicated logic kept out of CSS</td>\n<td>just simple css;<br>\nYou can write css that’s not yet supported by all browsers and it transforms it&nbsp; into standard Css.<br>\nOffers debugging tool;<br>\nsuggests fixes.</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Other css preprocessor examples&nbsp;&nbsp;&nbsp;are :</p>\n<ul>\n<li>AbsurdJs,</li>\n</ul>\n<ul>\n<li>Roole(that runs both client side and server side),</li>\n</ul>\n<ul>\n<li>Prepros, Clay (that is implementd in Haskell),</li>\n</ul>\n<ul>\n<li>Switch Css (that runs under Apache),</li>\n</ul>\n<ul>\n<li>Hitch.</li>\n</ul>\n<p>There are also &nbsp;some PHP based preprocessors:</p>\n<ul>\n<li>Pcss (server side),</li>\n</ul>\n<ul>\n<li>Turbine,</li>\n</ul>\n<ul>\n<li>Css pre-processor,</li>\n</ul>\n<ul>\n<li>DtCss,</li>\n</ul>\n<ul>\n<li>Css Crush.</li>\n</ul>\n<p>Css preprocessors &nbsp;can save a lot of time and have some very useful features.</p>\n<p>&nbsp;</p>\n<p><strong>Css post</strong><b>processors</b></p>\n<p><strong>Css post</strong>processors parse and <b>process</b> CSS. They parse your CSS and add vendor prefixes and are ideal for cross-browser fixes like &nbsp;polyfills*.</p>\n<p>Rework is considered both css preprocessor and css postprocessor because it is so flexible and has an extensive plugins collection.</p>\n<table style=\"width: 100%;font-size:11px\">\n<tbody>\n<tr>\n<th></th>\n<th>Pleeease<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/pleeease.jpg\"><img class=\"alignnone size-full wp-image-303\" alt=\"pleeease\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/pleeease.jpg\" width=\"265\" height=\"92\"></a></th>\n<th>Autoprefixer<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/autoprefix.jpg\"><img class=\"alignnone size-full wp-image-304\" alt=\"autoprefix\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/autoprefix.jpg\" width=\"259\" height=\"104\"></a></th>\n<th>PostCss<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/03/PostCss.jpg\"><img class=\"alignnone size-full wp-image-305\" alt=\"PostCss\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/03/PostCss.jpg\" width=\"195\" height=\"100\"></a></th>\n<th>Rework</th>\n</tr>\n<tr>\n<td>&nbsp;Generalities</td>\n<td>A node.js app;<br>\nclean stylesheets;<br>\nsupports older browsers;<br>\nbetter maintenability<br>\nincreases browser support;<br>\nbased on autoprefixer;<br>\ngenerates soucemaps from preprocessors to postprocessors</td>\n<td>Adds vendor prefixes to CSS rules&nbsp;using the&nbsp;<a href=\"http://caniuse.com/\">Can I Use</a>&nbsp;database(that contains browser popularity);<br>\ncan be easily integrated with Sass and Stylus;<br>\nsupports &nbsp;Ruby on Rails,Middleman, Mincer, Grunt, Sublime Text</td>\n<td>Transforming CSS with JS plugins.<br>\nIncludes functionalities of Saas,less and Stylus plus<br>\nIt includes only a CSS parser, a CSS node tree API, a&nbsp;source&nbsp;map generator, and a node tree stringifier</td>\n<td>Automate vendor prefixing;create your own properties, inline images;<br>\na module that accepts a string of CSS, produces a CSS abstract syntax tree (AST), and provides an API for manipulating that AST;<br>\nused by Twitter;<br>\nconsidered a postprocessor in<br>\n<a href=\"http://twin.github.io/css-pre-vs-post-processing/\">http://twin.github.io/css-pre-vs-post-processing/</a><br>\nbut also preprocessor in other places\n</td>\n</tr>\n<tr>\n<td>&nbsp;Installation</td>\n<td>Browser configuration Node.Js<br>\n$ npm install -g pleeease-cli</td>\n<td>gruntnpm&nbsp;install&nbsp;grunt-autoprefixer&nbsp;–save-dev</td>\n<td>&nbsp;JS plugins;grunt , gulp, webpack</td>\n<td>Node.js<br>\n$ npm install rework</td>\n</tr>\n<tr>\n<td>&nbsp;Speed/<br>\nPerformance</td>\n<td>reduces&nbsp;<b>calc()</b>&nbsp;whenever possible and other features can be disabled for speed</td>\n<td>&nbsp;After <a href=\"http://fotorama.io/\">http://fotorama.io/</a> switched from Compass to Autoprefixer, the CSS file size&nbsp;<a href=\"https://twitter.com/fotoramajs/status/362686759944982528\">decreased</a>&nbsp;by almost 20%.</td>\n<td>Very fast;<br>\n<em>40 times faster</em>&nbsp;than Ruby<br>\nSass compilation</td>\n</tr>\n<tr>\n<td>&nbsp;Plugins<br>\non top<br>\nof this</td>\n<td>&nbsp;Please.Next</td>\n<td>Sublime text<br>\nBrackets<br>\nAtom Editor<br>\n<span style=\"line-height: 19px\">Pleeease</span></td>\n<td>&nbsp;Css next – for future CSS code</td>\n<td>Styl<br>\nResin<br>\nMyth</td>\n</tr>\n<tr>\n<td>&nbsp;Cons</td>\n<td></td>\n<td>&nbsp;No interface so some prefixes may get created in a wrong way;<br>\nDoesn’t add polyfills;<br>\nAdds old Flexbox syntax</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>&nbsp;Pros</td>\n<td>cross-browser fixes;<br>\neasy way to combine preprocessors and postprocessors;<br>\nAllows you to override many options in one go;<br>\nCan be disabled in some parts of Css</td>\n<td>also fixes the &nbsp;syntax differences when adds prefixes;<br>\ncan be enabled from Visual studio:<br>\n tools&gt;options&gt; web essentials&gt;css&gt;<br>\nenable Autoprefixer<br>\ncleans outdated prefixes;</td>\n<td>Modular RTLCSS (right to left) module mirrors stylesheet by swapping left and right&nbsp; parts</td>\n<td>&nbsp;Rich collection of plugins;<br>\nflexible</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n<p><strong>Bibliography</strong></p>\n<p><a href=\"http://twin.github.io/css-pre-vs-post-processing/\">http://twin.github.io/css-pre-vs-post-processing/</a></p>\n<p><a href=\"http://code.tutsplus.com/tutorials/sass-vs-less-vs-stylus-preprocessor-shootout--net-24320\">http://code.tutsplus.com/tutorials/sass-vs-less-vs-stylus-preprocessor-shootout–net-24320</a></p>\n<p><a href=\"http://feedback.livereload.com/knowledgebase/articles/86227-choosing-a-css-preprocessor\">http://feedback.livereload.com/knowledgebase/articles/86227-choosing-a-css-preprocessor</a></p>\n<p><a href=\"https://github.com/reworkcss/rework\">https://github.com/reworkcss/rework</a></p>\n<p><a href=\"http://tjholowaychuk.tumblr.com/post/44267035203/modular-css-preprocessing-with-rework\">http://tjholowaychuk.tumblr.com/post/44267035203/modular-css-preprocessing-with-rework</a></p>\n<p><a href=\"https://www.google.ro/?gws_rd=cr,ssl&amp;ei=dlP9VKn0AoXcao_wgNgG#q=postCSS\">https://www.google.ro/?gws_rd=cr,ssl&amp;ei=dlP9VKn0AoXcao_wgNgG#q=postCSS</a></p>\n<p><a href=\"http://nicolasgallagher.com/custom-css-preprocessing/\">http://nicolasgallagher.com/custom-css-preprocessing/</a></p>\n<p><a href=\"http://www.sitepoint.com/6-current-options-css-preprocessors/\">http://www.sitepoint.com/6-current-options-css-preprocessors/</a></p>\n<p><a href=\"http://pleeease.io/\">http://pleeease.io/</a></p>\n<p><a href=\"https://gist.github.com/peteboere/8419143\">https://gist.github.com/peteboere/8419143</a></p>\n<p><a href=\"http://codegeekz.com/css-preprocessors-to-speed-up-your-coding/\">http://codegeekz.com/css-preprocessors-to-speed-up-your-coding/</a></p>\n<p><a href=\"https://github.com/postcss/autoprefixer\">https://github.com/postcss/autoprefixer</a></p>\n<p><a href=\"https://github.com/segmentio/myth\">https://github.com/segmentio/myth</a></p>\n<p>*<a href=\"https://remysharp.com/2010/10/08/what-is-a-polyfill\">https://remysharp.com/2010/10/08/what-is-a-polyfill</a></p>",
            "gallery": []
        },
        {
            "id": "6",
            "title": "Using the FLEXBOX property",
            "author": "Alina Cirja Ungur",
            "published": "12-02-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-11.png",
            "description": "Flexbox is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids. The CSS3 Flexible Box, or flexbox",
            "content": "<p><strong><em>Flexbox</em></strong> is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids.</p>\n<p>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. For many applications, the flexible box model provides an improvement over the block model in that it does not use floats, nor do the flex container’s margins collapse with the margins of its contents.<br>\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”).<br>\nIf regular layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout.</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\"><img class=\"aligncenter size-full wp-image-260\" alt=\"flexbox\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\" width=\"816\" height=\"339\"></a><br>\nBasically, items will be laid out following either the main axis (from main-start to main-end) or the cross axis (from cross-start to cross-end).<br>\n- <strong>main axis</strong> – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the flex-direction property (see below).<br>\n- <strong>main-start | main-end</strong> – The flex items are placed within the container starting from main-start and going to main-end.<br>\n- <strong>main size</strong> – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.<br>\n-<strong> cross axis</strong> – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.<br>\n- <strong>cross-start | cross-end</strong> – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.<br>\n- <strong>cross size</strong> – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.</p>\n<p>And now an<strong> example</strong>: <a href=\"http://jsfiddle.net/5juvd835/\">http://jsfiddle.net/5juvd835/</a></p>\n<p>Desktop layout:<br>\n<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop.jpg\"><img class=\"alignleft size-medium wp-image-261\" alt=\"flexbox-desktop\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg\" width=\"300\" height=\"278\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Mobile layout:</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile.jpg\"><img class=\"alignleft size-medium wp-image-262\" alt=\"flexbox-mobile\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg\" width=\"189\" height=\"300\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>See the browser support here: <a href=\"http://caniuse.com/#feat=flexbox\">http://caniuse.com/#feat=flexbox</a></p>\n<p>For more information check one of the following articles:<br>\n<a href=\"http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived\">http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived</a><br>\n<a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">http://css-tricks.com/snippets/css/a-guide-to-flexbox/</a><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a></p>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg"]
        },
        {
            "id": "7",
            "title": "Using the FLEXBOX property",
            "author": "Alina Cirja Ungur",
            "published": "12-02-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-11.png",
            "description": "Flexbox is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids. The CSS3 Flexible Box, or flexbox",
            "content": "<p><strong><em>Flexbox</em></strong> is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids.</p>\n<p>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. For many applications, the flexible box model provides an improvement over the block model in that it does not use floats, nor do the flex container’s margins collapse with the margins of its contents.<br>\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”).<br>\nIf regular layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout.</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\"><img class=\"aligncenter size-full wp-image-260\" alt=\"flexbox\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\" width=\"816\" height=\"339\"></a><br>\nBasically, items will be laid out following either the main axis (from main-start to main-end) or the cross axis (from cross-start to cross-end).<br>\n- <strong>main axis</strong> – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the flex-direction property (see below).<br>\n- <strong>main-start | main-end</strong> – The flex items are placed within the container starting from main-start and going to main-end.<br>\n- <strong>main size</strong> – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.<br>\n-<strong> cross axis</strong> – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.<br>\n- <strong>cross-start | cross-end</strong> – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.<br>\n- <strong>cross size</strong> – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.</p>\n<p>And now an<strong> example</strong>: <a href=\"http://jsfiddle.net/5juvd835/\">http://jsfiddle.net/5juvd835/</a></p>\n<p>Desktop layout:<br>\n<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop.jpg\"><img class=\"alignleft size-medium wp-image-261\" alt=\"flexbox-desktop\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg\" width=\"300\" height=\"278\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Mobile layout:</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile.jpg\"><img class=\"alignleft size-medium wp-image-262\" alt=\"flexbox-mobile\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg\" width=\"189\" height=\"300\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>See the browser support here: <a href=\"http://caniuse.com/#feat=flexbox\">http://caniuse.com/#feat=flexbox</a></p>\n<p>For more information check one of the following articles:<br>\n<a href=\"http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived\">http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived</a><br>\n<a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">http://css-tricks.com/snippets/css/a-guide-to-flexbox/</a><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a></p>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg"]
        },
        {
            "id": "8",
            "title": "Using the FLEXBOX property",
            "author": "Alina Cirja Ungur",
            "published": "12-02-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-11.png",
            "description": "Flexbox is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids. The CSS3 Flexible Box, or flexbox",
            "content": "<p><strong><em>Flexbox</em></strong> is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids.</p>\n<p>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. For many applications, the flexible box model provides an improvement over the block model in that it does not use floats, nor do the flex container’s margins collapse with the margins of its contents.<br>\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”).<br>\nIf regular layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout.</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\"><img class=\"aligncenter size-full wp-image-260\" alt=\"flexbox\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\" width=\"816\" height=\"339\"></a><br>\nBasically, items will be laid out following either the main axis (from main-start to main-end) or the cross axis (from cross-start to cross-end).<br>\n- <strong>main axis</strong> – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the flex-direction property (see below).<br>\n- <strong>main-start | main-end</strong> – The flex items are placed within the container starting from main-start and going to main-end.<br>\n- <strong>main size</strong> – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.<br>\n-<strong> cross axis</strong> – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.<br>\n- <strong>cross-start | cross-end</strong> – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.<br>\n- <strong>cross size</strong> – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.</p>\n<p>And now an<strong> example</strong>: <a href=\"http://jsfiddle.net/5juvd835/\">http://jsfiddle.net/5juvd835/</a></p>\n<p>Desktop layout:<br>\n<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop.jpg\"><img class=\"alignleft size-medium wp-image-261\" alt=\"flexbox-desktop\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg\" width=\"300\" height=\"278\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Mobile layout:</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile.jpg\"><img class=\"alignleft size-medium wp-image-262\" alt=\"flexbox-mobile\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg\" width=\"189\" height=\"300\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>See the browser support here: <a href=\"http://caniuse.com/#feat=flexbox\">http://caniuse.com/#feat=flexbox</a></p>\n<p>For more information check one of the following articles:<br>\n<a href=\"http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived\">http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived</a><br>\n<a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">http://css-tricks.com/snippets/css/a-guide-to-flexbox/</a><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a></p>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg"]
        },
        {
            "id": "9",
            "title": "Using the FLEXBOX property",
            "author": "Alina Cirja Ungur",
            "published": "12-02-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-11.png",
            "description": "Flexbox is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids. The CSS3 Flexible Box, or flexbox",
            "content": "<p><strong><em>Flexbox</em></strong> is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids.</p>\n<p>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. For many applications, the flexible box model provides an improvement over the block model in that it does not use floats, nor do the flex container’s margins collapse with the margins of its contents.<br>\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”).<br>\nIf regular layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout.</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\"><img class=\"aligncenter size-full wp-image-260\" alt=\"flexbox\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\" width=\"816\" height=\"339\"></a><br>\nBasically, items will be laid out following either the main axis (from main-start to main-end) or the cross axis (from cross-start to cross-end).<br>\n- <strong>main axis</strong> – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the flex-direction property (see below).<br>\n- <strong>main-start | main-end</strong> – The flex items are placed within the container starting from main-start and going to main-end.<br>\n- <strong>main size</strong> – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.<br>\n-<strong> cross axis</strong> – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.<br>\n- <strong>cross-start | cross-end</strong> – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.<br>\n- <strong>cross size</strong> – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.</p>\n<p>And now an<strong> example</strong>: <a href=\"http://jsfiddle.net/5juvd835/\">http://jsfiddle.net/5juvd835/</a></p>\n<p>Desktop layout:<br>\n<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop.jpg\"><img class=\"alignleft size-medium wp-image-261\" alt=\"flexbox-desktop\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg\" width=\"300\" height=\"278\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Mobile layout:</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile.jpg\"><img class=\"alignleft size-medium wp-image-262\" alt=\"flexbox-mobile\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg\" width=\"189\" height=\"300\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>See the browser support here: <a href=\"http://caniuse.com/#feat=flexbox\">http://caniuse.com/#feat=flexbox</a></p>\n<p>For more information check one of the following articles:<br>\n<a href=\"http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived\">http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived</a><br>\n<a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">http://css-tricks.com/snippets/css/a-guide-to-flexbox/</a><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a></p>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg"]
        },
        {
            "id": "10",
            "title": "Using the FLEXBOX property",
            "author": "Alina Cirja Ungur",
            "published": "12-02-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-11.png",
            "description": "Flexbox is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids. The CSS3 Flexible Box, or flexbox",
            "content": "<p><strong><em>Flexbox</em></strong> is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids.</p>\n<p>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. For many applications, the flexible box model provides an improvement over the block model in that it does not use floats, nor do the flex container’s margins collapse with the margins of its contents.<br>\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”).<br>\nIf regular layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout.</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\"><img class=\"aligncenter size-full wp-image-260\" alt=\"flexbox\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\" width=\"816\" height=\"339\"></a><br>\nBasically, items will be laid out following either the main axis (from main-start to main-end) or the cross axis (from cross-start to cross-end).<br>\n- <strong>main axis</strong> – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the flex-direction property (see below).<br>\n- <strong>main-start | main-end</strong> – The flex items are placed within the container starting from main-start and going to main-end.<br>\n- <strong>main size</strong> – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.<br>\n-<strong> cross axis</strong> – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.<br>\n- <strong>cross-start | cross-end</strong> – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.<br>\n- <strong>cross size</strong> – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.</p>\n<p>And now an<strong> example</strong>: <a href=\"http://jsfiddle.net/5juvd835/\">http://jsfiddle.net/5juvd835/</a></p>\n<p>Desktop layout:<br>\n<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop.jpg\"><img class=\"alignleft size-medium wp-image-261\" alt=\"flexbox-desktop\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg\" width=\"300\" height=\"278\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Mobile layout:</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile.jpg\"><img class=\"alignleft size-medium wp-image-262\" alt=\"flexbox-mobile\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg\" width=\"189\" height=\"300\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>See the browser support here: <a href=\"http://caniuse.com/#feat=flexbox\">http://caniuse.com/#feat=flexbox</a></p>\n<p>For more information check one of the following articles:<br>\n<a href=\"http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived\">http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived</a><br>\n<a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">http://css-tricks.com/snippets/css/a-guide-to-flexbox/</a><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a></p>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg"]
        },
        {
            "id": "11",
            "title": "Using the FLEXBOX property",
            "author": "Alina Cirja Ungur",
            "published": "12-02-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-11.png",
            "description": "Flexbox is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids. The CSS3 Flexible Box, or flexbox",
            "content": "<p><strong><em>Flexbox</em></strong> is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids.</p>\n<p>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. For many applications, the flexible box model provides an improvement over the block model in that it does not use floats, nor do the flex container’s margins collapse with the margins of its contents.<br>\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”).<br>\nIf regular layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout.</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\"><img class=\"aligncenter size-full wp-image-260\" alt=\"flexbox\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\" width=\"816\" height=\"339\"></a><br>\nBasically, items will be laid out following either the main axis (from main-start to main-end) or the cross axis (from cross-start to cross-end).<br>\n- <strong>main axis</strong> – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the flex-direction property (see below).<br>\n- <strong>main-start | main-end</strong> – The flex items are placed within the container starting from main-start and going to main-end.<br>\n- <strong>main size</strong> – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.<br>\n-<strong> cross axis</strong> – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.<br>\n- <strong>cross-start | cross-end</strong> – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.<br>\n- <strong>cross size</strong> – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.</p>\n<p>And now an<strong> example</strong>: <a href=\"http://jsfiddle.net/5juvd835/\">http://jsfiddle.net/5juvd835/</a></p>\n<p>Desktop layout:<br>\n<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop.jpg\"><img class=\"alignleft size-medium wp-image-261\" alt=\"flexbox-desktop\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg\" width=\"300\" height=\"278\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Mobile layout:</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile.jpg\"><img class=\"alignleft size-medium wp-image-262\" alt=\"flexbox-mobile\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg\" width=\"189\" height=\"300\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>See the browser support here: <a href=\"http://caniuse.com/#feat=flexbox\">http://caniuse.com/#feat=flexbox</a></p>\n<p>For more information check one of the following articles:<br>\n<a href=\"http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived\">http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived</a><br>\n<a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">http://css-tricks.com/snippets/css/a-guide-to-flexbox/</a><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a></p>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg"]
        },
        {
            "id": "12",
            "title": "Using the FLEXBOX property",
            "author": "Alina Cirja Ungur",
            "published": "12-02-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-11.png",
            "description": "Flexbox is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids. The CSS3 Flexible Box, or flexbox",
            "content": "<p><strong><em>Flexbox</em></strong> is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids.</p>\n<p>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. For many applications, the flexible box model provides an improvement over the block model in that it does not use floats, nor do the flex container’s margins collapse with the margins of its contents.<br>\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”).<br>\nIf regular layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout.</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\"><img class=\"aligncenter size-full wp-image-260\" alt=\"flexbox\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\" width=\"816\" height=\"339\"></a><br>\nBasically, items will be laid out following either the main axis (from main-start to main-end) or the cross axis (from cross-start to cross-end).<br>\n- <strong>main axis</strong> – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the flex-direction property (see below).<br>\n- <strong>main-start | main-end</strong> – The flex items are placed within the container starting from main-start and going to main-end.<br>\n- <strong>main size</strong> – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.<br>\n-<strong> cross axis</strong> – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.<br>\n- <strong>cross-start | cross-end</strong> – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.<br>\n- <strong>cross size</strong> – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.</p>\n<p>And now an<strong> example</strong>: <a href=\"http://jsfiddle.net/5juvd835/\">http://jsfiddle.net/5juvd835/</a></p>\n<p>Desktop layout:<br>\n<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop.jpg\"><img class=\"alignleft size-medium wp-image-261\" alt=\"flexbox-desktop\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg\" width=\"300\" height=\"278\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Mobile layout:</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile.jpg\"><img class=\"alignleft size-medium wp-image-262\" alt=\"flexbox-mobile\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg\" width=\"189\" height=\"300\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>See the browser support here: <a href=\"http://caniuse.com/#feat=flexbox\">http://caniuse.com/#feat=flexbox</a></p>\n<p>For more information check one of the following articles:<br>\n<a href=\"http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived\">http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived</a><br>\n<a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">http://css-tricks.com/snippets/css/a-guide-to-flexbox/</a><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a></p>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg"]
        },
        {
            "id": "13",
            "title": "Using the FLEXBOX property",
            "author": "Alina Cirja Ungur",
            "published": "12-02-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-11.png",
            "description": "Flexbox is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids. The CSS3 Flexible Box, or flexbox",
            "content": "<p><strong><em>Flexbox</em></strong> is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids.</p>\n<p>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. For many applications, the flexible box model provides an improvement over the block model in that it does not use floats, nor do the flex container’s margins collapse with the margins of its contents.<br>\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”).<br>\nIf regular layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout.</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\"><img class=\"aligncenter size-full wp-image-260\" alt=\"flexbox\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\" width=\"816\" height=\"339\"></a><br>\nBasically, items will be laid out following either the main axis (from main-start to main-end) or the cross axis (from cross-start to cross-end).<br>\n- <strong>main axis</strong> – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the flex-direction property (see below).<br>\n- <strong>main-start | main-end</strong> – The flex items are placed within the container starting from main-start and going to main-end.<br>\n- <strong>main size</strong> – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.<br>\n-<strong> cross axis</strong> – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.<br>\n- <strong>cross-start | cross-end</strong> – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.<br>\n- <strong>cross size</strong> – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.</p>\n<p>And now an<strong> example</strong>: <a href=\"http://jsfiddle.net/5juvd835/\">http://jsfiddle.net/5juvd835/</a></p>\n<p>Desktop layout:<br>\n<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop.jpg\"><img class=\"alignleft size-medium wp-image-261\" alt=\"flexbox-desktop\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg\" width=\"300\" height=\"278\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Mobile layout:</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile.jpg\"><img class=\"alignleft size-medium wp-image-262\" alt=\"flexbox-mobile\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg\" width=\"189\" height=\"300\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>See the browser support here: <a href=\"http://caniuse.com/#feat=flexbox\">http://caniuse.com/#feat=flexbox</a></p>\n<p>For more information check one of the following articles:<br>\n<a href=\"http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived\">http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived</a><br>\n<a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">http://css-tricks.com/snippets/css/a-guide-to-flexbox/</a><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a></p>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg"]
        },
        {
            "id": "14",
            "title": "Using the FLEXBOX property",
            "author": "Alina Cirja Ungur",
            "published": "12-02-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-11.png",
            "description": "Flexbox is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids. The CSS3 Flexible Box, or flexbox",
            "content": "<p><strong><em>Flexbox</em></strong> is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids.</p>\n<p>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. For many applications, the flexible box model provides an improvement over the block model in that it does not use floats, nor do the flex container’s margins collapse with the margins of its contents.<br>\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”).<br>\nIf regular layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout.</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\"><img class=\"aligncenter size-full wp-image-260\" alt=\"flexbox\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\" width=\"816\" height=\"339\"></a><br>\nBasically, items will be laid out following either the main axis (from main-start to main-end) or the cross axis (from cross-start to cross-end).<br>\n- <strong>main axis</strong> – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the flex-direction property (see below).<br>\n- <strong>main-start | main-end</strong> – The flex items are placed within the container starting from main-start and going to main-end.<br>\n- <strong>main size</strong> – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.<br>\n-<strong> cross axis</strong> – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.<br>\n- <strong>cross-start | cross-end</strong> – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.<br>\n- <strong>cross size</strong> – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.</p>\n<p>And now an<strong> example</strong>: <a href=\"http://jsfiddle.net/5juvd835/\">http://jsfiddle.net/5juvd835/</a></p>\n<p>Desktop layout:<br>\n<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop.jpg\"><img class=\"alignleft size-medium wp-image-261\" alt=\"flexbox-desktop\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg\" width=\"300\" height=\"278\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Mobile layout:</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile.jpg\"><img class=\"alignleft size-medium wp-image-262\" alt=\"flexbox-mobile\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg\" width=\"189\" height=\"300\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>See the browser support here: <a href=\"http://caniuse.com/#feat=flexbox\">http://caniuse.com/#feat=flexbox</a></p>\n<p>For more information check one of the following articles:<br>\n<a href=\"http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived\">http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived</a><br>\n<a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">http://css-tricks.com/snippets/css/a-guide-to-flexbox/</a><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a></p>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg"]
        },
        {
            "id": "15",
            "title": "Using the FLEXBOX property",
            "author": "Alina Cirja Ungur",
            "published": "12-02-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-11.png",
            "description": "Flexbox is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids. The CSS3 Flexible Box, or flexbox",
            "content": "<p><strong><em>Flexbox</em></strong> is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids.</p>\n<p>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. For many applications, the flexible box model provides an improvement over the block model in that it does not use floats, nor do the flex container’s margins collapse with the margins of its contents.<br>\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”).<br>\nIf regular layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout.</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\"><img class=\"aligncenter size-full wp-image-260\" alt=\"flexbox\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\" width=\"816\" height=\"339\"></a><br>\nBasically, items will be laid out following either the main axis (from main-start to main-end) or the cross axis (from cross-start to cross-end).<br>\n- <strong>main axis</strong> – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the flex-direction property (see below).<br>\n- <strong>main-start | main-end</strong> – The flex items are placed within the container starting from main-start and going to main-end.<br>\n- <strong>main size</strong> – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.<br>\n-<strong> cross axis</strong> – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.<br>\n- <strong>cross-start | cross-end</strong> – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.<br>\n- <strong>cross size</strong> – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.</p>\n<p>And now an<strong> example</strong>: <a href=\"http://jsfiddle.net/5juvd835/\">http://jsfiddle.net/5juvd835/</a></p>\n<p>Desktop layout:<br>\n<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop.jpg\"><img class=\"alignleft size-medium wp-image-261\" alt=\"flexbox-desktop\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg\" width=\"300\" height=\"278\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Mobile layout:</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile.jpg\"><img class=\"alignleft size-medium wp-image-262\" alt=\"flexbox-mobile\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg\" width=\"189\" height=\"300\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>See the browser support here: <a href=\"http://caniuse.com/#feat=flexbox\">http://caniuse.com/#feat=flexbox</a></p>\n<p>For more information check one of the following articles:<br>\n<a href=\"http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived\">http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived</a><br>\n<a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">http://css-tricks.com/snippets/css/a-guide-to-flexbox/</a><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a></p>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg"]
        },
        {
            "id": "16",
            "title": "Using the FLEXBOX property",
            "author": "Alina Cirja Ungur",
            "published": "12-02-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-11.png",
            "description": "Flexbox is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids. The CSS3 Flexible Box, or flexbox",
            "content": "<p><strong><em>Flexbox</em></strong> is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids.</p>\n<p>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. For many applications, the flexible box model provides an improvement over the block model in that it does not use floats, nor do the flex container’s margins collapse with the margins of its contents.<br>\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”).<br>\nIf regular layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout.</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\"><img class=\"aligncenter size-full wp-image-260\" alt=\"flexbox\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\" width=\"816\" height=\"339\"></a><br>\nBasically, items will be laid out following either the main axis (from main-start to main-end) or the cross axis (from cross-start to cross-end).<br>\n- <strong>main axis</strong> – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the flex-direction property (see below).<br>\n- <strong>main-start | main-end</strong> – The flex items are placed within the container starting from main-start and going to main-end.<br>\n- <strong>main size</strong> – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.<br>\n-<strong> cross axis</strong> – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.<br>\n- <strong>cross-start | cross-end</strong> – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.<br>\n- <strong>cross size</strong> – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.</p>\n<p>And now an<strong> example</strong>: <a href=\"http://jsfiddle.net/5juvd835/\">http://jsfiddle.net/5juvd835/</a></p>\n<p>Desktop layout:<br>\n<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop.jpg\"><img class=\"alignleft size-medium wp-image-261\" alt=\"flexbox-desktop\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg\" width=\"300\" height=\"278\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Mobile layout:</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile.jpg\"><img class=\"alignleft size-medium wp-image-262\" alt=\"flexbox-mobile\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg\" width=\"189\" height=\"300\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>See the browser support here: <a href=\"http://caniuse.com/#feat=flexbox\">http://caniuse.com/#feat=flexbox</a></p>\n<p>For more information check one of the following articles:<br>\n<a href=\"http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived\">http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived</a><br>\n<a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">http://css-tricks.com/snippets/css/a-guide-to-flexbox/</a><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a></p>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg"]
        },
        {
            "id": "17",
            "title": "Using the FLEXBOX property",
            "author": "Alina Cirja Ungur",
            "published": "12-02-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-11.png",
            "description": "Flexbox is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids. The CSS3 Flexible Box, or flexbox",
            "content": "<p><strong><em>Flexbox</em></strong> is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids.</p>\n<p>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. For many applications, the flexible box model provides an improvement over the block model in that it does not use floats, nor do the flex container’s margins collapse with the margins of its contents.<br>\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”).<br>\nIf regular layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout.</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\"><img class=\"aligncenter size-full wp-image-260\" alt=\"flexbox\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\" width=\"816\" height=\"339\"></a><br>\nBasically, items will be laid out following either the main axis (from main-start to main-end) or the cross axis (from cross-start to cross-end).<br>\n- <strong>main axis</strong> – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the flex-direction property (see below).<br>\n- <strong>main-start | main-end</strong> – The flex items are placed within the container starting from main-start and going to main-end.<br>\n- <strong>main size</strong> – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.<br>\n-<strong> cross axis</strong> – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.<br>\n- <strong>cross-start | cross-end</strong> – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.<br>\n- <strong>cross size</strong> – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.</p>\n<p>And now an<strong> example</strong>: <a href=\"http://jsfiddle.net/5juvd835/\">http://jsfiddle.net/5juvd835/</a></p>\n<p>Desktop layout:<br>\n<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop.jpg\"><img class=\"alignleft size-medium wp-image-261\" alt=\"flexbox-desktop\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg\" width=\"300\" height=\"278\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Mobile layout:</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile.jpg\"><img class=\"alignleft size-medium wp-image-262\" alt=\"flexbox-mobile\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg\" width=\"189\" height=\"300\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>See the browser support here: <a href=\"http://caniuse.com/#feat=flexbox\">http://caniuse.com/#feat=flexbox</a></p>\n<p>For more information check one of the following articles:<br>\n<a href=\"http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived\">http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived</a><br>\n<a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">http://css-tricks.com/snippets/css/a-guide-to-flexbox/</a><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a></p>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg"]
        },
        {
            "id": "18",
            "title": "Using the FLEXBOX property",
            "author": "Alina Cirja Ungur",
            "published": "12-02-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-11.png",
            "description": "Flexbox is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids. The CSS3 Flexible Box, or flexbox",
            "content": "<p><strong><em>Flexbox</em></strong> is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids.</p>\n<p>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. For many applications, the flexible box model provides an improvement over the block model in that it does not use floats, nor do the flex container’s margins collapse with the margins of its contents.<br>\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”).<br>\nIf regular layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout.</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\"><img class=\"aligncenter size-full wp-image-260\" alt=\"flexbox\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\" width=\"816\" height=\"339\"></a><br>\nBasically, items will be laid out following either the main axis (from main-start to main-end) or the cross axis (from cross-start to cross-end).<br>\n- <strong>main axis</strong> – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the flex-direction property (see below).<br>\n- <strong>main-start | main-end</strong> – The flex items are placed within the container starting from main-start and going to main-end.<br>\n- <strong>main size</strong> – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.<br>\n-<strong> cross axis</strong> – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.<br>\n- <strong>cross-start | cross-end</strong> – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.<br>\n- <strong>cross size</strong> – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.</p>\n<p>And now an<strong> example</strong>: <a href=\"http://jsfiddle.net/5juvd835/\">http://jsfiddle.net/5juvd835/</a></p>\n<p>Desktop layout:<br>\n<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop.jpg\"><img class=\"alignleft size-medium wp-image-261\" alt=\"flexbox-desktop\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg\" width=\"300\" height=\"278\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Mobile layout:</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile.jpg\"><img class=\"alignleft size-medium wp-image-262\" alt=\"flexbox-mobile\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg\" width=\"189\" height=\"300\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>See the browser support here: <a href=\"http://caniuse.com/#feat=flexbox\">http://caniuse.com/#feat=flexbox</a></p>\n<p>For more information check one of the following articles:<br>\n<a href=\"http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived\">http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived</a><br>\n<a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">http://css-tricks.com/snippets/css/a-guide-to-flexbox/</a><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a></p>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg"]
        },
        {
            "id": "19",
            "title": "Using the FLEXBOX property",
            "author": "Alina Cirja Ungur",
            "published": "12-02-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-11.png",
            "description": "Flexbox is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids. The CSS3 Flexible Box, or flexbox",
            "content": "<p><strong><em>Flexbox</em></strong> is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids.</p>\n<p>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. For many applications, the flexible box model provides an improvement over the block model in that it does not use floats, nor do the flex container’s margins collapse with the margins of its contents.<br>\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”).<br>\nIf regular layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout.</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\"><img class=\"aligncenter size-full wp-image-260\" alt=\"flexbox\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\" width=\"816\" height=\"339\"></a><br>\nBasically, items will be laid out following either the main axis (from main-start to main-end) or the cross axis (from cross-start to cross-end).<br>\n- <strong>main axis</strong> – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the flex-direction property (see below).<br>\n- <strong>main-start | main-end</strong> – The flex items are placed within the container starting from main-start and going to main-end.<br>\n- <strong>main size</strong> – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.<br>\n-<strong> cross axis</strong> – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.<br>\n- <strong>cross-start | cross-end</strong> – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.<br>\n- <strong>cross size</strong> – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.</p>\n<p>And now an<strong> example</strong>: <a href=\"http://jsfiddle.net/5juvd835/\">http://jsfiddle.net/5juvd835/</a></p>\n<p>Desktop layout:<br>\n<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop.jpg\"><img class=\"alignleft size-medium wp-image-261\" alt=\"flexbox-desktop\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg\" width=\"300\" height=\"278\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Mobile layout:</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile.jpg\"><img class=\"alignleft size-medium wp-image-262\" alt=\"flexbox-mobile\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg\" width=\"189\" height=\"300\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>See the browser support here: <a href=\"http://caniuse.com/#feat=flexbox\">http://caniuse.com/#feat=flexbox</a></p>\n<p>For more information check one of the following articles:<br>\n<a href=\"http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived\">http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived</a><br>\n<a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">http://css-tricks.com/snippets/css/a-guide-to-flexbox/</a><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a></p>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg"]
        },
        {
            "id": "20",
            "title": "Using the FLEXBOX property",
            "author": "Alina Cirja Ungur",
            "published": "12-02-2015",
            "featuredImage": "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-11.png",
            "description": "Flexbox is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids. The CSS3 Flexible Box, or flexbox",
            "content": "<p><strong><em>Flexbox</em></strong> is a totally new set of CSS properties that allows designers to create flexible layouts. This is great news for responsive design because it dramatically reduces the complexity of fluid grids.</p>\n<p>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. For many applications, the flexible box model provides an improvement over the block model in that it does not use floats, nor do the flex container’s margins collapse with the margins of its contents.<br>\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”).<br>\nIf regular layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout.</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\"><img class=\"aligncenter size-full wp-image-260\" alt=\"flexbox\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg\" width=\"816\" height=\"339\"></a><br>\nBasically, items will be laid out following either the main axis (from main-start to main-end) or the cross axis (from cross-start to cross-end).<br>\n- <strong>main axis</strong> – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the flex-direction property (see below).<br>\n- <strong>main-start | main-end</strong> – The flex items are placed within the container starting from main-start and going to main-end.<br>\n- <strong>main size</strong> – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.<br>\n-<strong> cross axis</strong> – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.<br>\n- <strong>cross-start | cross-end</strong> – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.<br>\n- <strong>cross size</strong> – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.</p>\n<p>And now an<strong> example</strong>: <a href=\"http://jsfiddle.net/5juvd835/\">http://jsfiddle.net/5juvd835/</a></p>\n<p>Desktop layout:<br>\n<a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop.jpg\"><img class=\"alignleft size-medium wp-image-261\" alt=\"flexbox-desktop\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg\" width=\"300\" height=\"278\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Mobile layout:</p>\n<p><a href=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile.jpg\"><img class=\"alignleft size-medium wp-image-262\" alt=\"flexbox-mobile\" src=\"https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg\" width=\"189\" height=\"300\"></a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>See the browser support here: <a href=\"http://caniuse.com/#feat=flexbox\">http://caniuse.com/#feat=flexbox</a></p>\n<p>For more information check one of the following articles:<br>\n<a href=\"http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived\">http://blog.teamtreehouse.com/flexbox-next-generation-css-layout-arrived</a><br>\n<a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">http://css-tricks.com/snippets/css/a-guide-to-flexbox/</a><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a></p>",
            "gallery": ["https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-desktop-300x278.jpg", "https://weblog.endava.com/user-experience-practice/files/2015/02/flexbox-mobile-189x300.jpg"]
        }
    ]
}